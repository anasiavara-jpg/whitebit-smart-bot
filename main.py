import asyncio
import logging
import os
import json
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, ContextTypes
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WHITEBIT_API = "https://whitebit.com/api/v4"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

markets = {}
auto_trade_enabled = True

# --- Utility functions ---
async def delete_webhook(app: Application):
    await app.bot.delete_webhook(drop_pending_updates=True)

def get_balance():
    # Placeholder for real API call
    return {"USDT": 100.0}

def place_order(market, side, amount):
    logger.info(f"Placing {side} order for {market}, amount {amount}")
    return True

# --- Command Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞.")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = [
        "/balance ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å",
        "/buy <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî –∫—É–ø–∏—Ç–∏",
        "/sell <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî –ø—Ä–æ–¥–∞—Ç–∏",
        "/market <—Ä–∏–Ω–æ–∫> ‚Äî –¥–æ–¥–∞—Ç–∏ —Ä–∏–Ω–æ–∫",
        "/removemarket <—Ä–∏–Ω–æ–∫> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–∏–Ω–æ–∫",
        "/setamount <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å—É–º—É",
        "/settp <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ TP",
        "/setsl <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ SL",
        "/status ‚Äî –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∏",
        "/auto on|off ‚Äî –≤–∫–ª/–≤–∏–∫–ª –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—é",
        "/stop ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞",
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"
    ]
    await update.message.reply_text("\n".join(commands))

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bal = get_balance()
    text = "\n".join([f"{k}: {v}" for k, v in bal.items()])
    await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å:\n{text}")

async def market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        return await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å —Ä–∏–Ω–æ–∫.")
    mk = context.args[0].upper()
    markets[mk] = {"amount": 0, "tp": 0, "sl": 0}
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {mk}")

async def removemarket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        return await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å —Ä–∏–Ω–æ–∫.")
    mk = context.args[0].upper()
    markets.pop(mk, None)
    await update.message.reply_text(f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ {mk}")

async def setamount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        return await update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setamount <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞>")
    mk, amount = context.args[0].upper(), float(context.args[1])
    if mk in markets:
        markets[mk]["amount"] = amount
        await update.message.reply_text(f"–°—É–º–∞ –¥–ª—è {mk}: {amount}")
    else:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–µ—Ä—à—É –¥–æ–¥–∞–π—Ç–µ —Ä–∏–Ω–æ–∫.")

async def settp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        return await update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /settp <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫>")
    mk, tp = context.args[0].upper(), float(context.args[1])
    if mk in markets:
        markets[mk]["tp"] = tp
        await update.message.reply_text(f"TP –¥–ª—è {mk}: {tp}%")
    else:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–µ—Ä—à—É –¥–æ–¥–∞–π—Ç–µ —Ä–∏–Ω–æ–∫.")

async def setsl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        return await update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setsl <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫>")
    mk, sl = context.args[0].upper(), float(context.args[1])
    if mk in markets:
        markets[mk]["sl"] = sl
        await update.message.reply_text(f"SL –¥–ª—è {mk}: {sl}%")
    else:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–µ—Ä—à—É –¥–æ–¥–∞–π—Ç–µ —Ä–∏–Ω–æ–∫.")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not markets:
        return await update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∏–Ω–∫—ñ–≤.")
    text = "\n".join([f"{k}: amount={v['amount']}, TP={v['tp']}, SL={v['sl']}" for k, v in markets.items()])
    await update.message.reply_text(text)

async def auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global auto_trade_enabled
    if len(context.args) == 0:
        return await update.message.reply_text(f"–ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è: {'ON' if auto_trade_enabled else 'OFF'}")
    state = context.args[0].lower()
    auto_trade_enabled = state == "on"
    await update.message.reply_text(f"–ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è {'—É–≤—ñ–º–∫–Ω–µ–Ω–∞' if auto_trade_enabled else '–≤–∏–º–∫–Ω–µ–Ω–∞'}")

async def trade_loop(app: Application):
    while True:
        if auto_trade_enabled:
            for mk, params in markets.items():
                if params["amount"] > 0:
                    place_order(mk, "buy", params["amount"])
        await asyncio.sleep(3600)

async def main():
    application = Application.builder().token(BOT_TOKEN).build()
    await delete_webhook(application)

    # Register handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_cmd))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("market", market))
    application.add_handler(CommandHandler("removemarket", removemarket))
    application.add_handler(CommandHandler("setamount", setamount))
    application.add_handler(CommandHandler("settp", settp))
    application.add_handler(CommandHandler("setsl", setsl))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("auto", auto))

    loop = asyncio.get_running_loop()
    loop.create_task(trade_loop(application))

    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
