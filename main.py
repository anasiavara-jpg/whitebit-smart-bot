import os
import sys
import logging
import asyncio
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env ===
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É .env")
    sys.exit(1)

# === –õ–æ–≥—É–≤–∞–Ω–Ω—è ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# === –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ ===
AUTO_TRADE = True
MARKETS = []
DEFAULT_AMOUNT = {}
TP_MAP = {}
SL_MAP = {}

VALID_QUOTE_ASSETS = {"USDT", "USDC", "BTC", "ETH"}

def is_valid_market(m: str) -> bool:
    if "_" not in m:
        return False
    base, quote = m.split("_", 1)
    return bool(base) and quote in VALID_QUOTE_ASSETS

# === –ö–æ–º–∞–Ω–¥–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "/balance [—Ç–∏–∫–µ—Ä] ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/market <—Ä–∏–Ω–æ–∫> ‚Äî –¥–æ–¥–∞—Ç–∏ —Ä–∏–Ω–æ–∫\n"
        "/removemarket <—Ä–∏–Ω–æ–∫> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–∏–Ω–æ–∫\n"
        "/setamount <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É —Å—É–º—É\n"
        "/settp <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ TP\n"
        "/setsl <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ SL\n"
        "/status ‚Äî –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\n"
        "/buy <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî –∫—É–ø–∏—Ç–∏\n"
        "/sell <—Ä–∏–Ω–æ–∫> <–∫—ñ–ª—å–∫—ñ—Å—Ç—å> ‚Äî –ø—Ä–æ–¥–∞—Ç–∏\n"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/stop ‚Äî –∑—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞"
    )
    await update.message.reply_text(text)

async def market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /market BTC_USDT")
        return
    m = context.args[0]
    if is_valid_market(m):
        if m not in MARKETS:
            MARKETS.append(m)
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {m}")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä–∏–Ω–æ–∫")

async def removemarket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /removemarket BTC_USDT")
        return
    m = context.args[0]
    if m in MARKETS:
        MARKETS.remove(m)
        await update.message.reply_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ {m}")
    else:
        await update.message.reply_text(f"{m} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

async def settp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /settp BTC_USDT 1.5")
        return
    market, tp = context.args
    TP_MAP[market] = float(tp)
    await update.message.reply_text(f"TP –¥–ª—è {market}: {tp}%")

async def setsl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /setsl BTC_USDT 0.5")
        return
    market, sl = context.args
    SL_MAP[market] = float(sl)
    await update.message.reply_text(f"SL –¥–ª—è {market}: {sl}%")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    report = []
    for m in sorted(set(MARKETS)):
        if is_valid_market(m):
            report.append(f"{m} | –°—É–º–∞: {DEFAULT_AMOUNT.get(m, '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')} | TP: {TP_MAP.get(m,'-')} | SL: {SL_MAP.get(m,'-')}")
    if report:
        await update.message.reply_text("\n".join(report))
    else:
        await update.message.reply_text("–ü–∞—Ä–∏ —â–µ –Ω–µ –¥–æ–¥–∞–Ω—ñ")

async def buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üü¢ –í–∏–∫–æ–Ω—É—é –∫—É–ø—ñ–≤–ª—é (—Ä–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞).")

async def sell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üî¥ –í–∏–∫–æ–Ω—É—é –ø—Ä–æ–¥–∞–∂ (—Ä–µ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞).")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚èπ –ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")
    await context.application.stop()

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    os.execv(sys.executable, ["python"] + sys.argv)

async def hourly_report(app: Application):
    while True:
        text = "‚è≥ –©–æ–≥–æ–¥–∏–Ω–Ω–∏–π –∑–≤—ñ—Ç:\n" + ", ".join(MARKETS) if MARKETS else "–ü–∞—Ä–∏ –Ω–µ –¥–æ–¥–∞–Ω—ñ"
        for chat_id in app.chat_data:
            await app.bot.send_message(chat_id=chat_id, text=text)
        await asyncio.sleep(3600)

# === –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("market", market))
    app.add_handler(CommandHandler("removemarket", removemarket))
    app.add_handler(CommandHandler("settp", settp))
    app.add_handler(CommandHandler("setsl", setsl))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("buy", buy))
    app.add_handler(CommandHandler("sell", sell))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("restart", restart))

    loop = asyncio.get_event_loop()
    loop.create_task(hourly_report(app))
    app.run_polling()

if __name__ == "__main__":
    main()
