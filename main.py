import os
import sys
import logging
import asyncio
import json
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
API_KEY = os.getenv("WHITEBIT_API_KEY")
API_SECRET = os.getenv("WHITEBIT_API_SECRET")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É .env")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
AUTO_TRADE = True
MARKETS = []
DEFAULT_AMOUNT = {}
TP_MAP = {}
SL_MAP = {}

VALID_QUOTE_ASSETS = {"USDT", "USDC", "BTC", "ETH"}

def is_valid_market(m: str) -> bool:
    if "_" not in m:
        return False
    base, quote = m.split("_", 1)
    return bool(base) and quote in VALID_QUOTE_ASSETS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞." if AUTO_TRADE else "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π.")

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await context.application.stop()
    os.execv(sys.executable, ['python'] + sys.argv)

async def market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /market BTC_USDT")
        return
    m = context.args[0].upper()
    if is_valid_market(m):
        MARKETS.append(m)
        await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {m}")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä–∏–Ω–æ–∫")

async def removemarket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /removemarket BTC_USDT")
        return
    m = context.args[0].upper()
    if m in MARKETS:
        MARKETS.remove(m)
        await update.message.reply_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ {m}")
    else:
        await update.message.reply_text("–¶—å–æ–≥–æ —Ä–∏–Ω–∫—É –Ω–µ–º–∞ —É —Å–ø–∏—Å–∫—É")

async def settp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /settp BTC_USDT 1.5")
        return
    TP_MAP[context.args[0].upper()] = float(context.args[1])
    await update.message.reply_text(f"TP –¥–ª—è {context.args[0].upper()} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

async def setsl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /setsl BTC_USDT 1.0")
        return
    SL_MAP[context.args[0].upper()] = float(context.args[1])
    await update.message.reply_text(f"SL –¥–ª—è {context.args[0].upper()} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = "üìä –°—Ç–∞—Ç—É—Å:
"
    for m in MARKETS:
        if is_valid_market(m):
            msg += f"{m}: —Å—É–º–∞={DEFAULT_AMOUNT.get(m, 'N/A')}, TP={TP_MAP.get(m,'-')}%, SL={SL_MAP.get(m,'-')}%
"
    await update.message.reply_text(msg)

async def auto_trade_loop(app: Application):
    while True:
        try:
            for m in [x for x in MARKETS if is_valid_market(x)]:
                # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ WhiteBIT API —Ç–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —É–≥–æ–¥
                logging.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ {m}")
            await asyncio.sleep(60)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—ñ: {e}")

async def hourly_report(app: Application):
    while True:
        text = "‚è∞ –©–æ–≥–æ–¥–∏–Ω–Ω–∏–π –∑–≤—ñ—Ç:
"
        for m in [x for x in MARKETS if is_valid_market(x)]:
            text += f"{m}: TP={TP_MAP.get(m,'-')}%, SL={SL_MAP.get(m,'-')}%, —Å—É–º–∞={DEFAULT_AMOUNT.get(m,'N/A')}
"
        for chat_id in app.bot_data.get("subscribers", []):
            await app.bot.send_message(chat_id=chat_id, text=text)
        await asyncio.sleep(3600)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(CommandHandler("market", market))
    app.add_handler(CommandHandler("removemarket", removemarket))
    app.add_handler(CommandHandler("settp", settp))
    app.add_handler(CommandHandler("setsl", setsl))
    app.add_handler(CommandHandler("status", status))

    loop = asyncio.get_event_loop()
    loop.create_task(auto_trade_loop(app))
    loop.create_task(hourly_report(app))
    app.run_polling()

if __name__ == "__main__":
    main()
