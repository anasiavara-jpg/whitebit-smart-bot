# main.py ‚Äî WhiteBIT Smart Bot (clean)
import asyncio
import base64
import hashlib
import hmac
import json
import logging
import os
import time
from typing import Dict, Any

import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from dotenv import load_dotenv

_nonce = int(time.time() * 1000)

def get_nonce():
    global _nonce
    _nonce += 1
    return _nonce

# ---------------- CONFIG ----------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")

if not (BOT_TOKEN and API_KEY and API_SECRET):
    raise RuntimeError("BOT_TOKEN / API_KEY / API_SECRET must be set in environment")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

BASE_URL = "https://whitebit.com/api/v4"
MARKETS_FILE = "markets.json"
markets: Dict[str, Dict[str, Any]] = {}

# ---------------- JSON SAVE/LOAD ----------------
def save_markets():
    try:
        with open(MARKETS_FILE, "w", encoding="utf-8") as f:
            json.dump(markets, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è markets.json: {e}")

def load_markets():
    global markets
    if os.path.exists(MARKETS_FILE):
        try:
            with open(MARKETS_FILE, "r", encoding="utf-8") as f:
                markets = json.load(f)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è markets.json: {e}")
            markets = {}
    else:
        markets = {}
        save_markets()

# ---------------- HTTP HELPERS (WHITEBIT v4) ----------------
async def public_request(endpoint: str) -> dict:
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.get(BASE_URL + endpoint)
        return r.json()

def make_headers(endpoint: str, extra_body: dict | None = None) -> tuple[dict, str]:
    """
    ‚úÖ –ö–æ—Ä–µ–∫—Ç–Ω–∞ –≤–µ—Ä—Å—ñ—è –ø—ñ–¥–ø–∏—Å—É –¥–ª—è WhiteBIT v4 (2025)
    –ü—ñ–¥–ø–∏—Å: HMAC_SHA512(secret, nonce + url + payload)
    """
    nonce = str(get_nonce())
    endpoint_clean = endpoint.lstrip("/")  # üëà –í–ê–ñ–õ–ò–í–û: –±–µ–∑ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ "/"
    body = extra_body or {}
    payload = json.dumps(body, separators=(",", ":"))

    signature_base = nonce + endpoint_clean + payload
    signature = hmac.new(API_SECRET.encode(), signature_base.encode(), hashlib.sha512).hexdigest()

    headers = {
        "Content-Type": "application/json",
        "X-TXC-APIKEY": API_KEY,
        "X-TXC-PAYLOAD": payload,
        "X-TXC-SIGNATURE": signature,
        "X-TXC-Nonce": nonce,
    }
    return headers, payload


async def private_post(endpoint: str, extra_body: dict | None = None) -> dict:
    headers, payload = make_headers(endpoint, extra_body)
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.post(BASE_URL + endpoint, headers=headers, content=payload)
        try:
            return r.json()
        except Exception:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {r.text}")
            return {"error": r.text}
            
# ---------------- WHITEBIT API ----------------
async def get_balance() -> dict:
    data = await private_post("/trade-account/balance")
    logging.info(f"DEBUG balance: {data}")
    print("üü° RAW WhiteBIT balance response:", data)
    return data if isinstance(data, dict) else {}

async def place_market_order(market: str, side: str, amount: float) -> dict:
    return await private_post("/order/market", {
        "market": market,
        "side": side,                # "buy" | "sell"
        "amount": str(amount),
        "type": "market",
    })

async def place_limit_order(market: str, side: str, price: float, amount: float) -> dict:
    return await private_post("/order/new", {
        "market": market,
        "side": side,
        "amount": str(amount),
        "price": str(price),
        "type": "limit",
    })

async def order_status(order_id: int) -> dict:
    return await private_post("/trade-account/order", {"orderId": order_id})

async def cancel_order(order_id: int) -> dict:
    return await private_post("/trade-account/order/cancel", {"orderId": order_id})

# ---------------- BOT COMMANDS ----------------
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç –¥–ª—è WhiteBIT.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
    )

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "<b>–û—Å–Ω–æ–≤–Ω—ñ:</b>\n"
        "/start ‚Äî –≤—ñ—Ç–∞–Ω–Ω—è\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "<b>–¢–æ—Ä–≥–æ–≤—ñ:</b>\n"
        "/balance ‚Äî –±–∞–ª–∞–Ω—Å\n"
        "/market BTC/USDT ‚Äî –¥–æ–¥–∞—Ç–∏ —Ä–∏–Ω–æ–∫\n"
        "/settp BTC/USDT 5 ‚Äî TP —É %\n"
        "/setsl BTC/USDT 2 ‚Äî SL —É %\n"
        "/setbuy BTC/USDT 30 ‚Äî –∫—É–ø—ñ–≤–ª—è –Ω–∞ 30 USDT\n"
        "/buy BTC/USDT ‚Äî —Ä–∞–∑–æ–≤–∞ –∫—É–ø—ñ–≤–ª—è\n"
        "/status ‚Äî –∞–∫—Ç–∏–≤–Ω—ñ —Ä–∏–Ω–∫–∏\n"
        "/stop ‚Äî –∑—É–ø–∏–Ω—è—î —Ç–æ—Ä–≥—ñ–≤–ª—é\n"
        "/removemarket BTC/USDT ‚Äî –≤–∏–¥–∞–ª—è—î —Ä–∏–Ω–æ–∫\n\n"
        "<b>–¢–µ—Ö–Ω—ñ—á–Ω—ñ:</b>\n"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ª–æ–≥—ñ–∫–∏\n"
        "/autotrade BTC/USDT on|off ‚Äî —É–≤—ñ–º–∫/–≤–∏–º–∫ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥"
    )

@dp.message(Command("balance"))
async def balance_cmd(message: types.Message):
    data = await get_balance()
    if not data:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å.")
        return

    lines = []
    for asset, info in sorted(data.items()):
        try:
            available = float(info.get("available", 0))
            freeze = float(info.get("freeze", 0))
        except Exception:
            available, freeze = 0.0, 0.0
        if available > 0 or freeze > 0:
            lines.append(f"{asset}: {available} (freeze {freeze})")

    text = "üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>:\n" + ("\n".join(lines) if lines else "0 –Ω–∞ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—è—Ö")
    await message.answer(text)

@dp.message(Command("market"))
async def market_cmd(message: types.Message):
    try:
        _, market = message.text.split()
        market = market.upper().replace("/", "_")  # BTC/USDT -> BTC_USDT
        markets[market] = {
            "tp": None,
            "sl": None,
            "orders": [],
            "autotrade": False,
            "buy_usdt": 10,
            "chat_id": message.chat.id,
        }
        save_markets()
        await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ —Ä–∏–Ω–æ–∫ {market} (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10 USDT)")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /market BTC/USDT")

@dp.message(Command("settp"))
async def settp_cmd(message: types.Message):
    try:
        _, market, percent = message.text.split()
        market = market.upper().replace("/", "_")
        markets[market]["tp"] = float(percent)
        save_markets()
        await message.answer(f"üìà TP –¥–ª—è {market}: {percent}%")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /settp BTC/USDT 5")

@dp.message(Command("setsl"))
async def setsl_cmd(message: types.Message):
    try:
        _, market, percent = message.text.split()
        market = market.upper().replace("/", "_")
        markets[market]["sl"] = float(percent)
        save_markets()
        await message.answer(f"üìâ SL –¥–ª—è {market}: {percent}%")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setsl BTC/USDT 2")

@dp.message(Command("setbuy"))
async def setbuy_cmd(message: types.Message):
    try:
        _, market, usdt = message.text.split()
        market = market.upper().replace("/", "_")
        usdt = float(usdt)
        if usdt <= 0:
            await message.answer("‚ö†Ô∏è –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0.")
            return
        markets[market]["buy_usdt"] = usdt
        save_markets()
        await message.answer(f"üìä –î–ª—è {market} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {usdt} USDT –Ω–∞ –∫–æ–∂–Ω—É –∫—É–ø—ñ–≤–ª—é.")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setbuy BTC/USDT 30")

@dp.message(Command("autotrade"))
async def autotrade_cmd(message: types.Message):
    try:
        _, market, mode = message.text.split()
        market = market.upper().replace("/", "_")
        if mode.lower() == "on":
            markets[market]["autotrade"] = True
            save_markets()
            await message.answer(f"‚ôªÔ∏è –ê–≤—Ç–æ—Ç—Ä–µ–π–¥ –¥–ª—è {market} —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")
        elif mode.lower() == "off":
            markets[market]["autotrade"] = False
            save_markets()
            await message.answer(f"‚èπÔ∏è –ê–≤—Ç–æ—Ç—Ä–µ–π–¥ –¥–ª—è {market} –≤–∏–º–∫–Ω–µ–Ω–æ.")
        else:
            await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /autotrade BTC/USDT on|off")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /autotrade BTC/USDT on|off")

# ---------------- TRADE LOGIC ----------------
async def start_new_trade(market: str, cfg: dict):
    # 1) –ë–∞–ª–∞–Ω—Å
    balances = await get_balance()
    usdt_av = balances.get("USDT", {}).get("available", 0)
    try:
        usdt = float(usdt_av)
    except Exception:
        usdt = 0.0

    spend = float(cfg.get("buy_usdt", 10))
    if usdt < spend:
        logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ USDT –¥–ª—è {market}. –Ñ {usdt}, —Ç—Ä–µ–±–∞ {spend}.")
        return

    # 2) –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞
    ticker = await public_request("/public/ticker")
    try:
        last_price = float(ticker.get(market, {}).get("last_price"))
    except Exception:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ last_price –¥–ª—è {market}: {ticker}")
        return

    # 3) –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
    base_amount = round(spend / last_price, 8)
    if base_amount <= 0:
        logging.error(f"–ù—É–ª—å–æ–≤–∏–π –æ–±—Å—è–≥ –±–∞–∑–æ–≤–æ—ó –º–æ–Ω–µ—Ç–∏: spend={spend}, price={last_price}")
        return

    # 4) –ö—É–ø—ñ–≤–ª—è
    buy_res = await place_market_order(market, "buy", base_amount)
    if "error" in buy_res:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∫—É–ø—ñ–≤–ª—ñ: {buy_res}")
        return
    logging.info(f"BUY placed: {buy_res}")

    # 5) TP/SL
    cfg["orders"] = []
    if cfg.get("tp"):
        tp_price = round(last_price * (1 + float(cfg["tp"]) / 100), 6)
        tp_order = await place_limit_order(market, "sell", tp_price, base_amount)
        if isinstance(tp_order, dict) and "id" in tp_order:
            cfg["orders"].append(tp_order["id"])

    if cfg.get("sl"):
        sl_price = round(last_price * (1 - float(cfg["sl"]) / 100), 6)
        sl_order = await place_limit_order(market, "sell", sl_price, base_amount)
        if isinstance(sl_order, dict) and "id" in sl_order:
            cfg["orders"].append(sl_order["id"])

    save_markets()

@dp.message(Command("buy"))
async def buy_cmd(message: types.Message):
    try:
        _, market = message.text.split()
        market = market.upper().replace("/", "_")
        if market not in markets:
            await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π —Ä–∏–Ω–æ–∫ —á–µ—Ä–µ–∑ /market.")
            return
        await start_new_trade(market, markets[market])
        await message.answer(f"‚úÖ –ö—É–ø—ñ–≤–ª—è {market} –≤–∏–∫–æ–Ω–∞–Ω–∞ –Ω–∞ {markets[market]['buy_usdt']} USDT.")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /buy BTC/USDT")

@dp.message(Command("status"))
async def status_cmd(message: types.Message):
    if not markets:
        await message.answer("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∏–Ω–∫—ñ–≤ –Ω–µ–º–∞—î.")
        return
    text = "üìä <b>–°—Ç–∞—Ç—É—Å</b>:\n"
    for m, cfg in markets.items():
        text += (
            f"\n{m}:\n"
            f" TP: {cfg['tp']}%\n"
            f" SL: {cfg['sl']}%\n"
            f" Buy: {cfg['buy_usdt']} USDT\n"
            f" –ê–≤—Ç–æ—Ç—Ä–µ–π–¥: {cfg['autotrade']}\n"
            f" –û—Ä–¥–µ—Ä—ñ–≤: {len(cfg['orders'])}\n"
        )
    await message.answer(text)

@dp.message(Command("removemarket"))
async def removemarket_cmd(message: types.Message):
    try:
        _, market = message.text.split()
        market = market.upper().replace("/", "_")
        if market in markets:
            del markets[market]
            save_markets()
            await message.answer(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {market}")
        else:
            await message.answer("‚ùå –†–∏–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /removemarket BTC/USDT")

@dp.message(Command("stop"))
async def stop_cmd(message: types.Message):
    markets.clear()
    save_markets()
    await message.answer("‚èπÔ∏è –¢–æ—Ä–≥—ñ–≤–ª—é –∑—É–ø–∏–Ω–µ–Ω–æ. –í—Å—ñ —Ä–∏–Ω–∫–∏ –æ—á–∏—â–µ–Ω–æ.")

@dp.message(Command("restart"))
async def restart_cmd(message: types.Message):
    for m in markets:
        markets[m]["orders"] = []
    save_markets()
    await message.answer("üîÑ –õ–æ–≥—ñ–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.")

# ---------------- MONITOR ----------------
async def monitor_orders():
    while True:
        try:
            for market, cfg in list(markets.items()):
                for order_id in list(cfg["orders"]):
                    st = await order_status(order_id)
                    if st.get("status") == "closed":
                        await bot.send_message(
                            chat_id=cfg.get("chat_id", 0) or 0,
                            text=f"‚úÖ –û—Ä–¥–µ—Ä {order_id} ({market}) –≤–∏–∫–æ–Ω–∞–Ω–æ!"
                        )
                        # –°–∫–∞—Å—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ –æ—Ä–¥–µ—Ä–∏ (–¥–∑–µ—Ä–∫–∞–ª—å–Ω–∏–π OCO)
                        for oid in list(cfg["orders"]):
                            if oid != order_id:
                                await cancel_order(oid)
                        cfg["orders"].clear()
                        save_markets()
                        # –ê–≤—Ç–æ—Ç—Ä–µ–π–¥ ‚Äî –Ω–æ–≤–∞ —É–≥–æ–¥–∞
                        if cfg.get("autotrade"):
                            await bot.send_message(
                                chat_id=cfg.get("chat_id", 0) or 0,
                                text=f"‚ôªÔ∏è –ê–≤—Ç–æ—Ç—Ä–µ–π–¥ {market}: –Ω–æ–≤–∞ —É–≥–æ–¥–∞ –Ω–∞ {cfg['buy_usdt']} USDT"
                            )
                            await start_new_trade(market, cfg)
        except Exception as e:
            logging.error(f"Monitor error: {e}")
        await asyncio.sleep(10)

# ---------------- RUN ----------------
async def main():
    load_markets()
    logging.info("üöÄ Bot is running and waiting for commands...")

    # ‚úÖ –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π webhook —ñ pending updates –ø–µ—Ä–µ–¥ polling
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("‚úÖ Webhook –æ—á–∏—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è webhook: {e}")

    # ‚úÖ –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä –æ—Ä–¥–µ—Ä—ñ–≤
    asyncio.create_task(monitor_orders())

    # ‚úÖ –°—Ç–∞—Ä—Ç polling –±–µ–∑ on_startup
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    try:
        print("‚úÖ main.py started")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("üõë Bot stopped manually")
