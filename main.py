import os
import sys
import asyncio
import logging
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# =================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===================
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É .env —Ñ–∞–π–ª—ñ")
    sys.exit(1)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

AUTO_TRADE = False
MARKETS = []
DEFAULT_AMOUNT = {}
TP_MAP = {}
SL_MAP = {}

VALID_QUOTE_ASSETS = {"USDT", "USDC", "BTC", "ETH"}

def is_valid_market(m: str) -> bool:
    if "_" not in m:
        return False
    base, quote = m.split("_", 1)
    return bool(base) and quote in VALID_QUOTE_ASSETS

# =================== –ö–û–ú–ê–ù–î–ò ===================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global AUTO_TRADE
    AUTO_TRADE = True
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —Ç–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞!")

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    os.execv(sys.executable, [sys.executable] + sys.argv)

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global AUTO_TRADE
    AUTO_TRADE = False
    await update.message.reply_text("‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—é –∑—É–ø–∏–Ω–µ–Ω–æ.")

async def market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–∫–∞–∂–∏ —Ä–∏–Ω–æ–∫, –ø—Ä–∏–∫–ª–∞–¥: /market BTC_USDT")
        return
    m = context.args[0].upper()
    if is_valid_market(m):
        if m not in MARKETS:
            MARKETS.append(m)
            await update.message.reply_text(f"‚úÖ {m} –¥–æ–¥–∞–Ω–æ —É —Å–ø–∏—Å–æ–∫")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è {m} –≤–∂–µ —É —Å–ø–∏—Å–∫—É")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä–∏–Ω–æ–∫")

async def removemarket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–∫–∞–∂–∏ —Ä–∏–Ω–æ–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: /removemarket BTC_USDT")
        return
    m = context.args[0].upper()
    if m in MARKETS:
        MARKETS.remove(m)
        await update.message.reply_text(f"üóë {m} –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É")
    else:
        await update.message.reply_text("‚ö†Ô∏è –¶—å–æ–≥–æ —Ä–∏–Ω–∫—É –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É")

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –ë–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —É –¥–µ–º–æ. –ü—ñ–¥–∫–ª—é—á–∏ WhiteBIT API –∫–ª—é—á—ñ.")

async def settp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /settp BTC_USDT 1")
        return
    try:
        m, tp = context.args[0].upper(), float(context.args[1])
        TP_MAP[m] = tp
        await update.message.reply_text(f"‚úÖ TP –¥–ª—è {m} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {tp}%")
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")

async def setsl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /setsl BTC_USDT 1")
        return
    try:
        m, sl = context.args[0].upper(), float(context.args[1])
        SL_MAP[m] = sl
        await update.message.reply_text(f"‚úÖ SL –¥–ª—è {m} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {sl}%")
    except:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines = []
    for m in sorted(set(MARKETS) | set(DEFAULT_AMOUNT) | set(TP_MAP) | set(SL_MAP)):
        if not is_valid_market(m):
            continue
        tp = TP_MAP.get(m, '-')
        sl = SL_MAP.get(m, '-')
        amt = DEFAULT_AMOUNT.get(m, '-')
        lines.append(f"{m}: —Å—É–º–∞={amt}, TP={tp}, SL={sl}")
    txt = "\n".join(lines) if lines else "–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π"
    await update.message.reply_text(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:\n{txt}")

# =================== –ê–í–¢–û–¶–ò–ö–õ ===================

async def auto_trade_loop(application):
    while True:
        if AUTO_TRADE and MARKETS:
            for m in [x for x in MARKETS if is_valid_market(x)]:
                try:
                    response = requests.get(f"https://whitebit.com/api/v4/public/ticker?market={m}")
                    data = response.json()
                    if m in data:
                        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ü—ñ–Ω—É {m}: {data[m]['last_price']}")
                except Exception as e:
                    logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {m}: {e}")
        await asyncio.sleep(60)

# =================== –ó–ê–ü–£–°–ö ===================

async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("market", market))
    app.add_handler(CommandHandler("removemarket", removemarket))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("settp", settp))
    app.add_handler(CommandHandler("setsl", setsl))
    app.add_handler(CommandHandler("status", status))

    asyncio.create_task(auto_trade_loop(app))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
