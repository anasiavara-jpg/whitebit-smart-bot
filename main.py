import os
import logging
import asyncio
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É .env")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
AUTO_TRADE = False
MARKETS = []
DEFAULT_AMOUNT = {}
TP_MAP = {}
SL_MAP = {}

VALID_QUOTE_ASSETS = {"USDT", "USDC", "BTC", "ETH"}

def is_valid_market(m: str) -> bool:
    if "_" not in m:
        return False
    base, quote = m.split("_", 1)
    return bool(base) and quote in VALID_QUOTE_ASSETS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global AUTO_TRADE
    AUTO_TRADE = True
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞.")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global AUTO_TRADE
    AUTO_TRADE = False
    await update.message.reply_text("‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—é –∑—É–ø–∏–Ω–µ–Ω–æ.")

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    os.execv(__file__, ["python"] + os.sys.argv)

async def market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /market BTC_USDT")
        return
    m = context.args[0].upper()
    if is_valid_market(m):
        if m not in MARKETS:
            MARKETS.append(m)
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {m}.")
        else:
            await update.message.reply_text(f"{m} –≤–∂–µ —î –≤ —Å–ø–∏—Å–∫—É.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä–∏–Ω–æ–∫.")

async def removemarket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /removemarket BTC_USDT")
        return
    m = context.args[0].upper()
    if m in MARKETS:
        MARKETS.remove(m)
        await update.message.reply_text(f"‚ùå {m} –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É.")
    else:
        await update.message.reply_text(f"{m} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å–ø–∏—Å–∫—É.")

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí∞ –ë–∞–ª–∞–Ω—Å–∏ –ø–æ–∫–∏ —â–æ –∑–∞–≥–ª—É—à–∫–∞ (API –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏).")

async def setamount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /setamount BTC_USDT 10")
        return
    m, a = context.args
    DEFAULT_AMOUNT[m.upper()] = float(a)
    await update.message.reply_text(f"üîß –î–ª—è {m.upper()} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—É–º—É {a}")

async def settp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /settp BTC_USDT 1.5")
        return
    m, tp = context.args
    TP_MAP[m.upper()] = float(tp)
    await update.message.reply_text(f"üéØ TP –¥–ª—è {m.upper()} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {tp}%")

async def setsl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /setsl BTC_USDT 1")
        return
    m, sl = context.args
    SL_MAP[m.upper()] = float(sl)
    await update.message.reply_text(f"üõë SL –¥–ª—è {m.upper()} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {sl}%")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status_text = "üìä *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞*
"
    status_text += f"–ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è: {'ON' if AUTO_TRADE else 'OFF'}
"
    if MARKETS:
        status_text += "–†–∏–Ω–∫–∏: " + ", ".join(MARKETS) + "
"
    await update.message.reply_text(status_text)

async def auto_trading_loop(app: Application):
    while True:
        if AUTO_TRADE:
            for m in [mm for mm in MARKETS if is_valid_market(mm)]:
                try:
                    # –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ
                    logger.info(f"–ü—Ä–∞—Ü—é—î–º–æ –∑ {m}")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑ {m}: {e}")
        await asyncio.sleep(60)

async def hourly_report(app: Application):
    while True:
        if MARKETS:
            text = "‚è≥ –©–æ–≥–æ–¥–∏–Ω–Ω–∏–π –∑–≤—ñ—Ç:
" + ", ".join(MARKETS)
            for chat_id in app.chat_ids:
                try:
                    await app.bot.send_message(chat_id=chat_id, text=text)
                except:
                    pass
        await asyncio.sleep(3600)

async def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(CommandHandler("market", market))
    app.add_handler(CommandHandler("removemarket", removemarket))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("setamount", setamount))
    app.add_handler(CommandHandler("settp", settp))
    app.add_handler(CommandHandler("setsl", setsl))
    app.add_handler(CommandHandler("status", status))

    asyncio.create_task(auto_trading_loop(app))
    asyncio.create_task(hourly_report(app))

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    await app.updater.idle()

if __name__ == "__main__":
    asyncio.run(main())
