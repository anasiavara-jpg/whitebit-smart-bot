import asyncio
import logging
import os
import sys
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from datetime import datetime, timedelta

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    print("‚ùå –ü–æ–º–∏–ª–∫–∞: BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")
    sys.exit(1)

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# --- –ó–º—ñ–Ω–Ω—ñ ---
markets = {}
auto_trading = True
last_report = datetime.utcnow()

# --- –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ---
async def send_message(chat_id, text):
    try:
        await bot.send_message(chat_id, text)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API-–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ø–µ—Ä–µ–¥ .encode()
def safe_str(value):
    return str(value) if value is not None else ""

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—ñ ---
async def auto_trade():
    global last_report
    while auto_trading:
        for market, data in markets.items():
            try:
                price = get_price_from_api(market)
                if price is None:
                    logging.warning(f"[{market}] –î–∞–Ω—ñ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ, –ø—Ä–æ–ø—É—Å–∫ —Ü–∏–∫–ª—É.")
                    continue
                # –¢—É—Ç –ª–æ–≥—ñ–∫–∞ –∫—É–ø—ñ–≤–ª—ñ/–ø—Ä–æ–¥–∞–∂—É
            except Exception as e:
                logging.error(f"[AUTO LOOP] {market}: {e}")
                continue

        # –©–æ–≥–æ–¥–∏–Ω–Ω–∏–π –∑–≤—ñ—Ç
        if datetime.utcnow() - last_report >= timedelta(hours=1):
            report = "üìä –©–æ–≥–æ–¥–∏–Ω–Ω–∏–π –∑–≤—ñ—Ç:
"
            for m, d in markets.items():
                report += f"{m}: TP={d.get('tp')} SL={d.get('sl')} Amt={d.get('amount')}
"
            await send_message(admin_chat_id, report)
            last_report = datetime.utcnow()

        await asyncio.sleep(10)

# --- –ö–æ–º–∞–Ω–¥–∏ ---
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –£–í–Ü–ú–ö–ù–ï–ù–ê.")
    asyncio.create_task(auto_trade())

@dp.message_handler(commands=['restart'])
async def restart_cmd(message: types.Message):
    await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    os.execv(sys.executable, [sys.executable] + sys.argv)

@dp.message_handler(commands=['removemarket'])
async def remove_market(message: types.Message):
    args = message.get_args().upper()
    if args in markets:
        del markets[args]
        await message.answer(f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ {args}")
    else:
        await message.answer("‚ö†Ô∏è –†–∏–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# --- –§—É–Ω–∫—Ü—ñ—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ü—ñ–Ω–∏ (–∑–∞–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ—é) ---
def get_price_from_api(market):
    return 0.1  # —Ç–µ—Å—Ç–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è

if __name__ == '__main__':
    try:
        executor.start_polling(dp, skip_updates=True)
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ.")
