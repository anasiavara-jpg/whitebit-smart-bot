import asyncio
import logging
import os
import hmac
import time
import hashlib
import httpx
import json

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# ---------------- CONFIG ----------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

BASE_URL = "https://whitebit.net/api/v4"
MARKETS_FILE = "markets.json"
markets = {}

# ---------------- JSON SAVE/LOAD ----------------
def save_markets():
    try:
        with open(MARKETS_FILE, "w", encoding="utf-8") as f:
            json.dump(markets, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è markets.json: {e}")

def load_markets():
    global markets
    if os.path.exists(MARKETS_FILE):
        try:
            with open(MARKETS_FILE, "r", encoding="utf-8") as f:
                markets = json.load(f)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è markets.json: {e}")
            markets = {}
    else:
        markets = {}
        save_markets()

# ---------------- API HELPERS ----------------
async def signed_request(endpoint: str, body: dict = None) -> dict:
    if body is None:
        body = {}
    body["request"] = endpoint
    body["nonce"] = int(time.time() * 1000)
    payload = json.dumps(body).encode()

    sign = hmac.new(API_SECRET.encode(), payload, hashlib.sha512).hexdigest()

    headers = {
        "Content-Type": "application/json",
        "X-TXC-APIKEY": API_KEY,
        "X-TXC-SIGNATURE": sign
    }

    async with httpx.AsyncClient() as client:
        r = await client.post(BASE_URL + endpoint, json=body, headers=headers)
        try:
            return r.json()
        except Exception:
            return {"error": r.text}

async def public_request(endpoint: str) -> dict:
    async with httpx.AsyncClient() as client:
        r = await client.get(BASE_URL + endpoint)
        return r.json()

async def private_post(endpoint: str, payload: dict | None = None) -> dict:
    if payload is None:
        payload = {}
    body = {
        "request": "/api/v4" + endpoint,
        "nonce": int(time.time() * 1000),
        **payload,
    }
    payload_bytes = json.dumps(body, separators=(',', ':')).encode()
    sign = hmac.new(API_SECRET.encode(), payload_bytes, hashlib.sha512).hexdigest()
    headers = {
        "Content-Type": "application/json",
        "X-TXC-APIKEY": API_KEY,
        "X-TXC-SIGNATURE": sign
    }
    async with httpx.AsyncClient() as client:
        r = await client.post(BASE_URL + endpoint, json=body, headers=headers, timeout=30)
        try:
            return r.json()
        except Exception:
            return {"error": r.text}
        
# ---------------- BALANCE ----------------
async def get_balance():
    endpoint = "/trade-account/balance"
    body = {
        "request": "/api/v4" + endpoint,
        "nonce": int(time.time() * 1000)
    }
    payload = json.dumps(body, separators=(',', ':')).encode()
    sign = hmac.new(API_SECRET.encode(), payload, hashlib.sha512).hexdigest()
    headers = {
        "Content-Type": "application/json",
        "X-TXC-APIKEY": API_KEY,
        "X-TXC-SIGNATURE": sign
    }
    async with httpx.AsyncClient() as client:
        r = await client.post(BASE_URL + endpoint, json=body, headers=headers, timeout=30)
    try:
        data = r.json()
        if isinstance(data, dict):
            logging.info(f"DEBUG balance: {data}")  # —Ç–∏–º—á–∞—Å–æ–≤–æ, —â–æ–± –±–∞—á–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            return data
        logging.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ API: {data}")
        return {}
    except Exception:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API: {r.text}")
        return {}

# ---------------- ORDERS ----------------
async def place_market_order(market: str, side: str, amount: float) -> dict:
    endpoint = "/trade-account/order"
    body = {
        "request": endpoint,
        "nonce": int(time.time() * 1000),
        "market": market,
        "side": side,           # "buy" –∞–±–æ "sell"
        "amount": str(amount),  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É –±–∞–∑–æ–≤—ñ–π –≤–∞–ª—é—Ç—ñ
        "type": "market"
    }

    payload = json.dumps(body, separators=(',', ':')).encode()
    sign = hmac.new(API_SECRET.encode(), payload, hashlib.sha512).hexdigest()

    headers = {
        "Content-Type": "application/json",
        "X-TXC-APIKEY": API_KEY,
        "X-TXC-SIGNATURE": sign
    }

    async with httpx.AsyncClient() as client:
        r = await client.post(BASE_URL + endpoint, json=body, headers=headers)
        try:
            return r.json()
        except Exception:
            return {"error": r.text}


async def place_limit_order(market: str, side: str, price: float, amount: float) -> dict:
    endpoint = "/trade-account/order"
    body = {
        "request": endpoint,
        "nonce": int(time.time() * 1000),
        "market": market,
        "side": side,
        "amount": str(amount),
        "price": str(price),
        "type": "limit"
    }

    payload = json.dumps(body, separators=(',', ':')).encode()
    sign = hmac.new(API_SECRET.encode(), payload, hashlib.sha512).hexdigest()

    headers = {
        "Content-Type": "application/json",
        "X-TXC-APIKEY": API_KEY,
        "X-TXC-SIGNATURE": sign
    }

    async with httpx.AsyncClient() as client:
        r = await client.post(BASE_URL + endpoint, json=body, headers=headers)
        try:
            return r.json()
        except Exception:
            return {"error": r.text}


async def order_status(order_id: int) -> dict:
    endpoint = "/trade-account/order"
    body = {
        "request": endpoint,
        "nonce": int(time.time() * 1000),
        "orderId": order_id
    }

    payload = json.dumps(body, separators=(',', ':')).encode()
    sign = hmac.new(API_SECRET.encode(), payload, hashlib.sha512).hexdigest()

    headers = {
        "Content-Type": "application/json",
        "X-TXC-APIKEY": API_KEY,
        "X-TXC-SIGNATURE": sign
    }

    async with httpx.AsyncClient() as client:
        r = await client.post(BASE_URL + endpoint, json=body, headers=headers)
        try:
            return r.json()
        except Exception:
            return {"error": r.text}

async def cancel_order(order_id: int) -> dict:
    endpoint = "/trade-account/order/cancel"
    body = {
        "request": endpoint,
        "nonce": int(time.time() * 1000),
        "orderId": order_id
    }

    payload = json.dumps(body, separators=(',', ':')).encode()
    sign = hmac.new(API_SECRET.encode(), payload, hashlib.sha512).hexdigest()

    headers = {
        "Content-Type": "application/json",
        "X-TXC-APIKEY": API_KEY,
        "X-TXC-SIGNATURE": sign
    }

    async with httpx.AsyncClient() as client:
        r = await client.post(BASE_URL + endpoint, json=body, headers=headers)
        try:
            return r.json()
        except Exception:
            return {"error": r.text}

# ---------------- BOT COMMANDS ----------------
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç –¥–ª—è WhiteBIT.\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "<b>–û—Å–Ω–æ–≤–Ω—ñ:</b>\n"
        "/start ‚Äî –≤—ñ—Ç–∞–Ω–Ω—è\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "<b>–¢–æ—Ä–≥–æ–≤—ñ:</b>\n"
        "/balance ‚Äî –±–∞–ª–∞–Ω—Å\n"
        "/market BTC/USDT ‚Äî –¥–æ–¥–∞—Ç–∏ —Ä–∏–Ω–æ–∫\n"
        "/settp BTC/USDT 5 ‚Äî TP —É %\n"
        "/setsl BTC/USDT 2 ‚Äî SL —É %\n"
        "/setbuy BTC/USDT 30 ‚Äî –∫—É–ø—ñ–≤–ª—è –Ω–∞ 30 USDT\n"
        "/buy BTC/USDT ‚Äî —Ä–∞–∑–æ–≤–∞ –∫—É–ø—ñ–≤–ª—è\n"
        "/status ‚Äî –∞–∫—Ç–∏–≤–Ω—ñ —Ä–∏–Ω–∫–∏\n"
        "/stop ‚Äî –∑—É–ø–∏–Ω—è—î —Ç–æ—Ä–≥—ñ–≤–ª—é\n"
        "/removemarket BTC/USDT ‚Äî –≤–∏–¥–∞–ª—è—î —Ä–∏–Ω–æ–∫\n\n"
        "<b>–¢–µ—Ö–Ω—ñ—á–Ω—ñ:</b>\n"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ª–æ–≥—ñ–∫–∏\n"
        "/autotrade BTC/USDT on|off ‚Äî —É–≤—ñ–º–∫/–≤–∏–º–∫ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥"
    )

@dp.message(Command("balance"))
async def balance_cmd(message: types.Message):
    data = await get_balance()
    if not data:
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å.")
        return
    text = "üí∞ –ë–∞–ª–∞–Ω—Å:\n"
    for asset, info in data.items():
    try:
        available = float(info["available"])
    except:
        available = 0
    if available > 0:
        text += f"{asset}: {available}\n"

@dp.message(Command("market"))
async def market_cmd(message: types.Message):
    try:
        _, market = message.text.split()
        market = market.upper().replace("/", "_")
        markets[market] = {"tp": None, "sl": None, "orders": [], "autotrade": False, "buy_usdt": 10, "chat_id": message.chat.id}
        save_markets()
        await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ —Ä–∏–Ω–æ–∫ {market} (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10 USDT)")
    except:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /market BTC/USDT")

@dp.message(Command("settp"))
async def settp_cmd(message: types.Message):
    try:
        _, market, percent = message.text.split()
        market = market.upper().replace("/", "_")
        markets[market]["tp"] = float(percent)
        save_markets()
        await message.answer(f"üìà TP –¥–ª—è {market}: {percent}%")
    except:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /settp BTC/USDT 5")

@dp.message(Command("setsl"))
async def setsl_cmd(message: types.Message):
    try:
        _, market, percent = message.text.split()
        market = market.upper().replace("/", "_")
        markets[market]["sl"] = float(percent)
        save_markets()
        await message.answer(f"üìâ SL –¥–ª—è {market}: {percent}%")
    except:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setsl BTC/USDT 2")

@dp.message(Command("setbuy"))
async def setbuy_cmd(message: types.Message):
    try:
        _, market, usdt = message.text.split()
        market = market.upper().replace("/", "_")
        usdt = float(usdt)
        if usdt <= 0:
            await message.answer("‚ö†Ô∏è –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0.")
            return
        markets[market]["buy_usdt"] = usdt
        save_markets()
        await message.answer(f"üìä –î–ª—è {market} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {usdt} USDT –Ω–∞ –∫–æ–∂–Ω—É –∫—É–ø—ñ–≤–ª—é.")
    except:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setbuy BTC/USDT 30")

@dp.message(Command("autotrade"))
async def autotrade_cmd(message: types.Message):
    try:
        _, market, mode = message.text.split()
        market = market.upper().replace("/", "_")
        if mode.lower() == "on":
            markets[market]["autotrade"] = True
            save_markets()
            await message.answer(f"‚ôªÔ∏è –ê–≤—Ç–æ—Ç—Ä–µ–π–¥ –¥–ª—è {market} —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")
        elif mode.lower() == "off":
            markets[market]["autotrade"] = False
            save_markets()
            await message.answer(f"‚èπÔ∏è –ê–≤—Ç–æ—Ç—Ä–µ–π–¥ –¥–ª—è {market} –≤–∏–º–∫–Ω–µ–Ω–æ.")
        else:
            await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /autotrade BTC/USDT on|off")
    except:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /autotrade BTC/USDT on|off")

# ------------------- TRADE -------------------
async def start_new_trade(market: str, cfg: dict):
    balances = await get_balance()
    usdt_av = balances.get("USDT", {}).get("available", 0)

    try:
        usdt = float(usdt_av)
    except Exception:
        usdt = 0.0

    spend = float(cfg.get("buy_usdt", 10))
    if usdt < spend:
        logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ USDT –¥–ª—è {market}. –Ñ {usdt}, —Ç—Ä–µ–±–∞ {spend}.")
        return
        
    ticker = await public_request(f"/public/ticker/{market}")
    try:
        last_price = float(ticker.get("last_price"))
    except Exception:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ last_price –¥–ª—è {market}: {ticker}")
        return

    base_amount = round(spend / last_price, 8)
    if base_amount <= 0:
        logging.error(f"–ù—É–ª—å–æ–≤–∏–π –æ–±—Å—è–≥ –±–∞–∑–æ–≤–æ—ó –º–æ–Ω–µ—Ç–∏: spend={spend}, price={last_price}")
        return

    buy_res = await place_market_order(market, "buy", base_amount)
    if "error" in buy_res:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∫—É–ø—ñ–≤–ª—ñ: {buy_res}")
        return

    cfg["orders"] = []
    if cfg.get("tp"):
        tp_price = round(last_price * (1 + float(cfg["tp"]) / 100), 6)
        tp_order = await place_limit_order(market, "sell", tp_price, base_amount)
        if isinstance(tp_order, dict) and "id" in tp_order:
            cfg["orders"].append(tp_order["id"])

    if cfg.get("sl"):
        sl_price = round(last_price * (1 - float(cfg["sl"]) / 100), 6)
        sl_order = await place_limit_order(market, "sell", sl_price, base_amount)
        if isinstance(sl_order, dict) and "id" in sl_order:
            cfg["orders"].append(sl_order["id"])

    save_markets()

@dp.message(Command("buy"))
async def buy_cmd(message: types.Message):
    try:
        _, market = message.text.split()
        market = market.upper().replace("/", "_")
        if market not in markets:
            await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π —Ä–∏–Ω–æ–∫ —á–µ—Ä–µ–∑ /market.")
            return
        await start_new_trade(market, markets[market])
        await message.answer(f"‚úÖ –ö—É–ø—ñ–≤–ª—è {market} –≤–∏–∫–æ–Ω–∞–Ω–∞ –Ω–∞ {markets[market]['buy_usdt']} USDT.")
    except:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /buy BTC/USDT")

# ------------------- STATUS -------------------
@dp.message(Command("status"))
async def status_cmd(message: types.Message):
    if not markets:
        await message.answer("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∏–Ω–∫—ñ–≤ –Ω–µ–º–∞—î.")
        return
    text = "üìä –°—Ç–∞—Ç—É—Å:\n"
    for m, cfg in markets.items():
        text += f"\n{m}:\n TP: {cfg['tp']}%\n SL: {cfg['sl']}%\n Buy: {cfg['buy_usdt']} USDT\n –ê–≤—Ç–æ—Ç—Ä–µ–π–¥: {cfg['autotrade']}\n –û—Ä–¥–µ—Ä—ñ–≤: {len(cfg['orders'])}\n"
    await message.answer(text)

# ------------------- OTHER -------------------
@dp.message(Command("removemarket"))
async def removemarket_cmd(message: types.Message):
    try:
        _, market = message.text.split()
        market = market.upper().replace("/", "_")
        if market in markets:
            del markets[market]
            save_markets()
            await message.answer(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {market}")
        else:
            await message.answer("‚ùå –†–∏–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /removemarket BTC/USDT")

@dp.message(Command("stop"))
async def stop_cmd(message: types.Message):
    markets.clear()
    save_markets()
    await message.answer("‚èπÔ∏è –¢–æ—Ä–≥—ñ–≤–ª—é –∑—É–ø–∏–Ω–µ–Ω–æ. –í—Å—ñ —Ä–∏–Ω–∫–∏ –æ—á–∏—â–µ–Ω–æ.")

@dp.message(Command("restart"))
async def restart_cmd(message: types.Message):
    for m in markets:
        markets[m]["orders"] = []
    save_markets()
    await message.answer("üîÑ –õ–æ–≥—ñ–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.")

# ------------------- MONITOR -------------------
async def monitor_orders():
    while True:
        try:
            for market, cfg in list(markets.items()):
                for order_id in list(cfg["orders"]):
                    status = await order_status(order_id)
                    if status.get("status") == "closed":
                        await bot.send_message(chat_id=cfg.get("chat_id", 0) or 0,
                                               text=f"‚úÖ –û—Ä–¥–µ—Ä {order_id} ({market}) –≤–∏–∫–æ–Ω–∞–Ω–æ!")
                        for oid in cfg["orders"]:
                            if oid != order_id:
                                await cancel_order(oid)
                        cfg["orders"].clear()
                        if cfg.get("autotrade"):
                            await bot.send_message(chat_id=cfg.get("chat_id", 0) or 0,
                                                   text=f"‚ôªÔ∏è –ê–≤—Ç–æ—Ç—Ä–µ–π–¥ {market}: –Ω–æ–≤–∞ —É–≥–æ–¥–∞ –Ω–∞ {cfg['buy_usdt']} USDT")
                            await start_new_trade(market, cfg)
        except Exception as e:
            logging.error(f"Monitor error: {e}")
        await asyncio.sleep(10)

# ---------------- RUN ----------------
async def main():
    load_markets()
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(monitor_orders())
    print("üöÄ Bot is running and waiting for commands...")
    await asyncio.sleep(2)   # –Ω–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞
    await dp.start_polling(bot, skip_updates=True)

if __name__=="__main__":
    import asyncio
    print("‚úÖ main.py started")
    asyncio.run(main())
