import asyncio
import logging
import os
import json
import aiohttp
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, ContextTypes
)

# === –õ–û–ì–Ü ===
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
WHITEBIT_API = "https://whitebit.com/api/v4"

markets = {}
AUTO_TRADE = True

# === –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ===
async def fetch_price(session, market):
    try:
        async with session.get(f"{WHITEBIT_API}/public/ticker?market={market}") as resp:
            data = await resp.json()
            return float(data.get(market, {}).get("last_price", 0))
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ {market}: {e}")
        return None

async def save_markets():
    with open("markets.json", "w", encoding="utf-8") as f:
        json.dump(markets, f, indent=2)

async def load_markets():
    global markets
    try:
        with open("markets.json", "r", encoding="utf-8") as f:
            markets = json.load(f)
    except FileNotFoundError:
        markets = {}

# === –ö–û–ú–ê–ù–î–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "/price <—Ä–∏–Ω–æ–∫> ‚Äî —Ü—ñ–Ω–∞
"
        "/balance ‚Äî –±–∞–ª–∞–Ω—Å
"
        "/buy <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî –∫—É–ø–∏—Ç–∏
"
        "/sell <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî –ø—Ä–æ–¥–∞—Ç–∏
"
        "/setamount <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî –¥–µ—Ñ–æ–ª—Ç–Ω–∞ —Å—É–º–∞
"
        "/market <—Ä–∏–Ω–æ–∫> ‚Äî –¥–æ–¥–∞—Ç–∏ —Ä–∏–Ω–æ–∫
"
        "/removemarket <—Ä–∏–Ω–æ–∫> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–∏–Ω–æ–∫
"
        "/settp <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ TP
"
        "/setsl <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ SL
"
        "/status ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ —Ä–∏–Ω–∫–∏
"
        "/auto on|off ‚Äî —É–≤—ñ–º–∫/–≤–∏–º–∫ –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—é
"
        "/stop ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞
"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"
    )
    await update.message.reply_text(help_text)

async def market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å —Ä–∏–Ω–æ–∫, –Ω–∞–ø—Ä. /market DOGE_USDT")
        return
    m = context.args[0].upper()
    markets[m] = {"amount": None, "tp": None, "sl": None}
    await save_markets()
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {m}")

async def removemarket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å —Ä–∏–Ω–æ–∫")
        return
    m = context.args[0].upper()
    if m in markets:
        del markets[m]
        await save_markets()
        await update.message.reply_text(f"üóë –†–∏–Ω–æ–∫ {m} –≤–∏–¥–∞–ª–µ–Ω–æ")
    else:
        await update.message.reply_text("‚ùå –†–∏–Ω–∫—É –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É")

async def setamount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setamount <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞>")
        return
    m, amount = context.args[0].upper(), context.args[1]
    if m not in markets:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ä–∏–Ω–æ–∫ –∫–æ–º–∞–Ω–¥–æ—é /market")
        return
    markets[m]["amount"] = float(amount)
    await save_markets()
    await update.message.reply_text(f"–°—É–º–∞ –¥–ª—è {m}: {amount}")

async def settp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /settp <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫>")
        return
    m, tp = context.args[0].upper(), context.args[1]
    if m not in markets:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ä–∏–Ω–æ–∫ –∫–æ–º–∞–Ω–¥–æ—é /market")
        return
    markets[m]["tp"] = float(tp)
    await save_markets()
    await update.message.reply_text(f"TP –¥–ª—è {m}: {tp}%")

async def setsl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setsl <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫>")
        return
    m, sl = context.args[0].upper(), context.args[1]
    if m not in markets:
        await update.message.reply_text("‚ùå –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —Ä–∏–Ω–æ–∫ –∫–æ–º–∞–Ω–¥–æ—é /market")
        return
    markets[m]["sl"] = float(sl)
    await save_markets()
    await update.message.reply_text(f"SL –¥–ª—è {m}: {sl}%")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not markets:
        await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ —Ä–∏–Ω–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return
    text = "\n".join([f"{m}: amount={d['amount']}, TP={d['tp']}, SL={d['sl']}" for m, d in markets.items()])
    await update.message.reply_text(text)

# === –ê–í–¢–û–¢–û–†–ì–Ü–í–õ–Ø ===
async def trade_loop(app):
    async with aiohttp.ClientSession() as session:
        while True:
            if AUTO_TRADE:
                for m in markets:
                    price = await fetch_price(session, m)
                    if price:
                        logging.info(f"–¶—ñ–Ω–∞ {m}: {price}")
            await asyncio.sleep(10)

async def main():
    await load_markets()
    application = Application.builder().token(BOT_TOKEN).build()

    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("market", market))
    application.add_handler(CommandHandler("removemarket", removemarket))
    application.add_handler(CommandHandler("setamount", setamount))
    application.add_handler(CommandHandler("settp", settp))
    application.add_handler(CommandHandler("setsl", setsl))
    application.add_handler(CommandHandler("status", status))

    # –°—Ç–∞—Ä—Ç—É—î–º–æ polling —ñ trade loop –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    loop = asyncio.get_running_loop()
    loop.create_task(trade_loop(application))

    await application.initialize()
    await application.start()
    await application.updater.start_polling()
    await application.updater.idle()

if __name__ == "__main__":
    asyncio.run(main())
