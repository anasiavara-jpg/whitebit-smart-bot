import asyncio
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import aiohttp

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ =====
markets = {}
auto_trading_enabled = False

# ===== –•–µ–ª–ø–µ—Ä–∏ =====
async def fetch_price(market: str):
    url = f"https://whitebit.com/api/v4/public/ticker?market={market}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data.get("last_price")
            return None

# ===== –ö–æ–º–∞–Ω–¥–∏ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "/price <—Ä–∏–Ω–æ–∫> ‚Äî —Ü—ñ–Ω–∞\n"
        "/market <—Ä–∏–Ω–æ–∫> ‚Äî –¥–æ–¥–∞—Ç–∏ —Ä–∏–Ω–æ–∫\n"
        "/removemarket <—Ä–∏–Ω–æ–∫> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–∏–Ω–æ–∫\n"
        "/setamount <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî —Å—É–º–∞ –æ—Ä–¥–µ—Ä—É\n"
        "/settp <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ TP\n"
        "/setsl <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ SL\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å –±–æ—Ça\n"
        "/auto on|off ‚Äî –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è\n"
        "/stop ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞\n"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏"
    )
    await update.message.reply_text(text)

async def price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å —Ä–∏–Ω–æ–∫")
        return
    market = context.args[0]
    price = await fetch_price(market)
    if price:
        await update.message.reply_text(f"üí≤ {market}: {price}")
    else:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É")

async def market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å —Ä–∏–Ω–æ–∫")
        return
    market = context.args[0]
    markets[market] = {"amount": 0, "tp": 0, "sl": 0}
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ —Ä–∏–Ω–æ–∫ {market}")

async def removemarket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂—ñ—Ç—å —Ä–∏–Ω–æ–∫")
        return
    market = context.args[0]
    if market in markets:
        del markets[market]
        await update.message.reply_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ —Ä–∏–Ω–æ–∫ {market}")
    else:
        await update.message.reply_text("‚ùå –¶—å–æ–≥–æ —Ä–∏–Ω–∫—É –Ω–µ–º–∞—î")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not markets:
        await update.message.reply_text("‚ÑπÔ∏è –†–∏–Ω–∫–∏ –Ω–µ –¥–æ–¥–∞–Ω—ñ")
    else:
        text = "\n".join(
            [f"{m}: amount={v['amount']} TP={v['tp']} SL={v['sl']}" for m, v in markets.items()]
        )
        await update.message.reply_text(f"üìä –°—Ç–∞—Ç—É—Å:\n{text}")

# ===== –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è =====
async def trade_loop():
    while auto_trading_enabled:
        for market in markets.keys():
            price = await fetch_price(market)
            logger.info(f"[AUTO] {market}: {price}")
        await asyncio.sleep(30)

async def toggle_auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global auto_trading_enabled
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /auto on –∞–±–æ /auto off")
        return
    if context.args[0] == "on":
        auto_trading_enabled = True
        asyncio.create_task(trade_loop())
        await update.message.reply_text("‚úÖ –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–∞")
    elif context.args[0] == "off":
        auto_trading_enabled = False
        await update.message.reply_text("‚èπ –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –≤–∏–º–∫–Ω–µ–Ω–∞")

# ===== –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è =====
async def main():
    application = Application.builder().token("YOUR_TELEGRAM_BOT_TOKEN").build()
    await application.bot.delete_webhook(drop_pending_updates=True)

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("price", price))
    application.add_handler(CommandHandler("market", market))
    application.add_handler(CommandHandler("removemarket", removemarket))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("auto", toggle_auto))

    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
