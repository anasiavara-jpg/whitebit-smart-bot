import os
import time
import json
import hmac
import base64
import hashlib
import requests
import sys
from typing import Dict, Any, Optional, List

# ========= Config from ENV =========
BOT_TOKEN   = os.getenv("BOT_TOKEN", "").strip()
API_PUBLIC  = (os.getenv("API_PUBLIC_KEY") or os.getenv("API_PUBLIC") or os.getenv("WB_PUBLIC_KEY") or os.getenv("API_KEY") or "").strip()
API_SECRET  = (os.getenv("API_SECRET_KEY") or os.getenv("API_SECRET") or os.getenv("WB_SECRET_KEY") or "").strip()

# Runtime switches (can be changed via commands)
AUTO_TRADING  = False      # /auto on|off
REAL_TRADING  = False      # /trade on|off
TRADE_AMOUNT  = 1.0        # /amount <number>  (in USDT)
TAKE_PROFIT_P = 1.0        # /settp <pct>, e.g. 1.0 = +1%
STOP_LOSS_P   = 1.0        # /setsl <pct>, e.g. 1.0 = -1%

# ========= Endpoints =========
TG_API     = f"https://api.telegram.org/bot{BOT_TOKEN}"
WB_PUBLIC  = "https://whitebit.com/api/v4/public"
WB_PRIVATE = "https://whitebit.com/api/v4"

# ========= State =========
RUNNING: bool = True
MARKETS: List[str] = ["BTC_USDT"]   # /market add; /remove; /markets
LAST_PRICE: Dict[str, float] = {}   # last seen ticker price per market
ENTRY_PRICE: Dict[str, float] = {}  # price of last BUY per market (to evaluate TP/SL)
OVERRIDE_AMOUNT: Dict[str, float] = {}  # /setamount <MARKET> <amount>

def log(msg: str):
    print(msg, flush=True)

def tg_send(chat_id: int, text: str):
    try:
        requests.post(f"{TG_API}/sendMessage", json={"chat_id": chat_id, "text": text})
    except Exception as e:
        log(f"[tg_send] {e}")

# ===== WhiteBIT signing =====
def _make_signature_payload(path: str, data: Optional[Dict[str, Any]] = None):
    if data is None:
        data = {}
    body = dict(data)
    body["request"] = path
    body["nonce"] = str(int(time.time() * 1000))
    body_json = json.dumps(body, separators=(",", ":"))
    payload_b64 = base64.b64encode(body_json.encode()).decode()
    signature = hmac.new(API_SECRET.encode(), body_json.encode(), hashlib.sha512).hexdigest()
    return body_json, payload_b64, signature

def wb_private_post(path: str, data: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    body_json, payload_b64, signature = _make_signature_payload(path, data)
    headers = {
        "Content-Type": "application/json",
        "X-TXC-APIKEY": API_PUBLIC,
        "X-TXC-PAYLOAD": payload_b64,
        "X-TXC-SIGNATURE": signature,
    }
    url = f"{WB_PRIVATE}{path}"
    r = requests.post(url, data=body_json, headers=headers, timeout=30)
    log(f"[WB POST] {path} -> {r.status_code} {r.text[:200]}")
    r.raise_for_status()
    return r.json() if r.text else {}

def wb_price(market: str) -> Optional[float]:
    r = requests.get(f"{WB_PUBLIC}/ticker", timeout=15)
    r.raise_for_status()
    data = r.json()
    info = data.get(market.upper())
    try:
        return float(info["last_price"]) if info else None
    except Exception:
        return None

def wb_balance(ticker: Optional[str] = None) -> Dict[str, str]:
    payload = {}
    data = wb_private_post("/main-account/balance", payload)
    if ticker:
        t = ticker.upper()
        v = data.get(t, {})
        bal = v.get("main_balance", "0") if isinstance(v, dict) else "0"
        return {t: bal}
    # all positive balances
    out = {}
    for k, v in data.items():
        try:
            bal = float(v.get("main_balance", "0") or 0)
            if bal > 0:
                out[k] = str(bal)
        except Exception:
            continue
    return out

def wb_order_market(market: str, side: str, amount_quote_usdt: float) -> Dict[str, Any]:
    # WhiteBIT market order expects:
    #   { market, side: "buy"/"sell", amount }
    # Here we pass "amount" as a string; their API interprets for market orders:
    # - for BUY: amount is in quote (USDT)
    # - for SELL: amount is in base (we convert quote->base using last price)
    m = market.upper()
    if side.lower() == "sell":
        price = wb_price(m) or 0.0
        if price <= 0:
            raise RuntimeError("–ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è –ø–µ—Ä–µ—Ä–∞—Ö—É–Ω–∫—É sell.")
        base_amount = amount_quote_usdt / price
        payload = {"market": m, "side": "sell", "amount": f"{base_amount:.8f}"}
    else:
        payload = {"market": m, "side": "buy", "amount": f"{amount_quote_usdt:.8f}"}
    return wb_private_post("/order/market", payload)

def normalize_market(s: str) -> str:
    s = s.strip().upper()
    return s if "_" in s else f"{s}_USDT"

# ====== Helper strings ======
HELP = (
    "ü§ñ WhiteBIT –±–æ—Ç (–∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è + —Ä—É—á–Ω—ñ –∫–æ–º–∞–Ω–¥–∏)\n\n"
    "üìà –†—É—á–Ω—ñ:\n"
    "/price <–ø–∞—Ä–∞> ‚Äî —Ü—ñ–Ω–∞ (–Ω–∞–ø—Ä. /price BTC_USDT)\n"
    "/balance [—Ç–∏–∫–µ—Ä] ‚Äî –±–∞–ª–∞–Ω—Å (–Ω–∞–ø—Ä. /balance –∞–±–æ /balance USDT)\n"
    "/buy <–ø–∞—Ä–∞> <—Å—É–º–∞_USDT> ‚Äî —Ä–∏–Ω–∫–æ–≤–∞ –ø–æ–∫—É–ø–∫–∞\n"
    "/sell <–ø–∞—Ä–∞> <—Å—É–º–∞_USDT> ‚Äî —Ä–∏–Ω–∫–æ–≤–∏–π –ø—Ä–æ–¥–∞–∂ (—Å—É–º–∞ –≤ USDT; –∫–æ–Ω–≤–µ—Ä—Ç—É—î—Ç—å—Å—è —É –±–∞–∑—É)\n\n"
    "ü§ñ –ê–≤—Ç–æ:\n"
    "/auto on|off ‚Äî —É–≤—ñ–º–∫/–≤–∏–º–∫ –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—é\n"
    "/trade on|off ‚Äî —Ä–µ–∞–ª—å–Ω—ñ –æ—Ä–¥–µ—Ä–∏ —á–∏ –ª–∏—à–µ —Å–∏–≥–Ω–∞–ª–∏\n"
    "/market <–ø–∞—Ä–∞> ‚Äî –¥–æ–¥–∞—Ç–∏ –ø–∞—Ä—É (–º–æ–∂–Ω–∞ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤)\n"
    "/remove <–ø–∞—Ä–∞> ‚Äî –ø—Ä–∏–±—Ä–∞—Ç–∏ –ø–∞—Ä—É\n"
    "/markets ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –ø–∞—Ä–∏\n"
    "/amount <USDT> ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–∞ —Å—É–º–∞ –Ω–∞ —É–≥–æ–¥—É\n"
    "/setamount <–ø–∞—Ä–∞> <USDT> ‚Äî —Å—É–º–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É –ø–∞—Ä—É\n"
    "/settp <pct> ‚Äî take-profit —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (–Ω–∞–ø—Ä. 1 = 1%)\n"
    "/setsl <pct> ‚Äî stop-loss —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö (–Ω–∞–ø—Ä. 1 = 1%)\n"
    "/status ‚Äî –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è\n\n"
    "‚öôÔ∏è –ö–µ—Ä—É–≤–∞–Ω–Ω—è:\n"
    "/stop ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞\n"
    "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—É\n"
)

def clear_webhook_and_offset():
    # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –∫–æ–Ω—Ñ–ª—ñ–∫—Ç webhook vs getUpdates
    try:
        requests.get(f"{TG_API}/deleteWebhook", timeout=10)
        # —Å–∫–∏–¥–∞—î–º–æ —á–µ—Ä–≥—É –∞–ø–¥–µ–π—Ç—ñ–≤ (–ø–æ—á–Ω–µ–º–æ –∑ ¬´–ø–æ—Ç–æ—á–Ω–æ–≥–æ¬ª)
        requests.get(f"{TG_API}/getUpdates", params={"offset": -1}, timeout=10)
        log("[INIT] Webhook cleared & offset reset")
    except Exception as e:
        log(f"[INIT] cleanup error: {e}")

# ====== Autotrade loop ======
def auto_trade_once(chat_id: int):
    global LAST_PRICE, ENTRY_PRICE
    for m in list(MARKETS):
        try:
            price = wb_price(m)
            if price is None:
                continue
            prev = LAST_PRICE.get(m)
            LAST_PRICE[m] = price

            # –Ø–∫—â–æ —î –≤—ñ–¥–∫—Ä–∏—Ç–∞ ¬´–ø–æ–∑–∏—Ü—ñ—è¬ª (–º–∏ –∫—É–ø–∏–ª–∏ —Ä–∞–Ω—ñ—à–µ) ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ TP/SL
            entry = ENTRY_PRICE.get(m)
            if entry:
                chg_from_entry = (price - entry) / entry * 100.0
                if chg_from_entry >= TAKE_PROFIT_P:
                    # SELL —Å–∏–≥–Ω–∞–ª
                    amount = OVERRIDE_AMOUNT.get(m, TRADE_AMOUNT)
                    tg_send(chat_id, f"[AUTO] {m}: TP {chg_from_entry:+.2f}% ‚Üí SELL {amount} USDT @ {price:.4f}")
                    if REAL_TRADING:
                        try:
                            res = wb_order_market(m, "sell", amount)
                            tg_send(chat_id, f"‚úÖ SELL –≤–∏–∫–æ–Ω–∞–Ω–æ: {res}")
                            ENTRY_PRICE.pop(m, None)
                        except Exception as e:
                            tg_send(chat_id, f"‚ùå SELL –ø–æ–º–∏–ª–∫–∞: {e}")
                    else:
                        ENTRY_PRICE.pop(m, None)
                    continue
                if chg_from_entry <= -STOP_LOSS_P:
                    # SELL (stop)
                    amount = OVERRIDE_AMOUNT.get(m, TRADE_AMOUNT)
                    tg_send(chat_id, f"[AUTO] {m}: SL {chg_from_entry:+.2f}% ‚Üí SELL {amount} USDT @ {price:.4f}")
                    if REAL_TRADING:
                        try:
                            res = wb_order_market(m, "sell", amount)
                            tg_send(chat_id, f"‚úÖ SELL –≤–∏–∫–æ–Ω–∞–Ω–æ: {res}")
                            ENTRY_PRICE.pop(m, None)
                        except Exception as e:
                            tg_send(chat_id, f"‚ùå SELL –ø–æ–º–∏–ª–∫–∞: {e}")
                    else:
                        ENTRY_PRICE.pop(m, None)
                    continue

            # –Ø–∫—â–æ –ø–æ–∑–∏—Ü—ñ—ó –Ω–µ–º–∞—î ‚Äî —à—É–∫–∞—î–º–æ —Ç–æ—á–∫—É –≤—Ö–æ–¥—É –Ω–∞ –≤—ñ–¥–∫–∞—Ç—ñ / —ñ–º–ø—É–ª—å—Å—ñ
            if prev is None:
                continue
            chg = (price - prev) / prev * 100.0
            if chg <= -1.0:  # –ø–∞–¥—ñ–Ω–Ω—è ‚â•1% –≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Ü—ñ–Ω–∏ ‚Üí BUY
                amount = OVERRIDE_AMOUNT.get(m, TRADE_AMOUNT)
                tg_send(chat_id, f"[AUTO] {m}: {chg:+.2f}% ‚Üí BUY {amount} USDT @ {price:.4f}")
                if REAL_TRADING:
                    try:
                        res = wb_order_market(m, "buy", amount)
                        tg_send(chat_id, f"‚úÖ BUY –≤–∏–∫–æ–Ω–∞–Ω–æ: {res}")
                        ENTRY_PRICE[m] = price
                    except Exception as e:
                        tg_send(chat_id, f"‚ùå BUY –ø–æ–º–∏–ª–∫–∞: {e}")
                else:
                    ENTRY_PRICE[m] = price
                continue
        except Exception as e:
            log(f"[auto] {m}: {e}")

# ====== Bot main loop ======
def run_bot():
    global RUNNING, AUTO_TRADING, REAL_TRADING, TRADE_AMOUNT, TAKE_PROFIT_P, STOP_LOSS_P
    if not BOT_TOKEN or ":" not in BOT_TOKEN:
        log("‚ùå BOT_TOKEN –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π.")
        return

    clear_webhook_and_offset()

    log("Bot is up. Waiting for updates...")
    offset = None
    last_auto = 0
    main_chat_id = None

    while RUNNING:
        try:
            # long polling
            resp = requests.get(f"{TG_API}/getUpdates", params={"timeout": 50, "offset": offset}, timeout=80)
            # handle token issues early
            if resp.status_code == 409:
                log("‚ö†Ô∏è 409 Conflict: –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π –¥–µ—Å—å —ñ–Ω–∞–∫—à–µ. –ó—É–ø–∏–Ω–∏ —ñ–Ω—à—ñ —ñ–Ω—Å—Ç–∞–Ω—Å–∏ –∞–±–æ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–π —Ç–æ–∫–µ–Ω.")
                time.sleep(5)
                continue
            if resp.status_code == 401:
                log("‚ùå 401 Unauthorized: –Ω–µ–≤—ñ—Ä–Ω–∏–π BOT_TOKEN.")
                break
            resp.raise_for_status()

            updates = resp.json().get("result", [])
            for u in updates:
                offset = max(offset or 0, u["update_id"] + 1)
                msg = u.get("message") or u.get("edited_message")
                if not msg or "text" not in msg:
                    continue
                chat_id = msg["chat"]["id"]
                text = msg["text"].strip()
                parts = text.split()
                cmd = parts[0].lower()
                main_chat_id = chat_id

                if cmd in ("/start", "/help"):
                    tg_send(chat_id, HELP)

                elif cmd == "/stop":
                    tg_send(chat_id, "‚èπ –ó—É–ø–∏–Ω—è—é –±–æ—Ç–∞.")
                    RUNNING = False
                    sys.exit(0)

                elif cmd == "/restart":
                    tg_send(chat_id, "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—É...")
                    os.execv(sys.executable, ["python"] + sys.argv)

                elif cmd == "/price":
                    m = normalize_market(parts[1]) if len(parts) > 1 else MARKETS[0]
                    try:
                        p = wb_price(m)
                        tg_send(chat_id, f"{m}: {p}" if p else f"–†–∏–Ω–æ–∫ {m} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                    except Exception as e:
                        tg_send(chat_id, f"–ü–æ–º–∏–ª–∫–∞ —Ü—ñ–Ω–∏: {e}")

                elif cmd == "/balance":
                    t = parts[1] if len(parts) > 1 else None
                    try:
                        bals = wb_balance(t)
                        if not bals:
                            tg_send(chat_id, "–ë–∞–ª–∞–Ω—Å –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ 0.")
                        else:
                            lines = [f"{k}: {v}" for k, v in bals.items()]
                            tg_send(chat_id, "–ë–∞–ª–∞–Ω—Å:\n" + "\n".join(lines))
                    except Exception as e:
                        tg_send(chat_id, f"–ü–æ–º–∏–ª–∫–∞ –±–∞–ª–∞–Ω—Å—É: {e}")

                elif cmd == "/buy" or cmd == "/sell":
                    if len(parts) < 3:
                        tg_send(chat_id, f"–ü—Ä–∏–∫–ª–∞–¥: {cmd} BTC_USDT 5")
                        continue
                    m = normalize_market(parts[1])
                    try:
                        amt = float(parts[2])
                    except:
                        tg_send(chat_id, "–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º —É USDT.")
                        continue
                    if not REAL_TRADING:
                        tg_send(chat_id, "‚ö†Ô∏è –†–µ–∞–ª—å–Ω–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è –≤–∏–º–∫–Ω–µ–Ω–∞. –£–≤—ñ–º–∫–Ω–∏: /trade on")
                        continue
                    try:
                        res = wb_order_market(m, "buy" if cmd == "/buy" else "sell", amt)
                        tg_send(chat_id, f"‚úÖ –û—Ä–¥–µ—Ä {('BUY' if cmd == '/buy' else 'SELL')} {m} –≤–∏–∫–æ–Ω–∞–Ω–æ: {res}")
                    except Exception as e:
                        tg_send(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ä–¥–µ—Ä–∞: {e}")

                elif cmd == "/market":
                    if len(parts) < 2:
                        tg_send(chat_id, "–ü—Ä–∏–∫–ª–∞–¥: /market ETH_USDT")
                        continue
                    m = normalize_market(parts[1])
                    if m not in MARKETS:
                        MARKETS.append(m)
                    tg_send(chat_id, f"‚úÖ –î–æ–¥–∞–Ω–æ {m}. –ü–æ—Ç–æ—á–Ω—ñ: {', '.join(MARKETS)}")

                elif cmd == "/remove":
                    if len(parts) < 2:
                        tg_send(chat_id, "–ü—Ä–∏–∫–ª–∞–¥: /remove ETH_USDT")
                        continue
                    m = normalize_market(parts[1])
                    if m in MARKETS:
                        MARKETS.remove(m)
                        ENTRY_PRICE.pop(m, None)
                        LAST_PRICE.pop(m, None)
                        OVERRIDE_AMOUNT.pop(m, None)
                        tg_send(chat_id, f"‚ùå –í–∏–¥–∞–ª–µ–Ω–æ {m}. –ü–æ—Ç–æ—á–Ω—ñ: {', '.join(MARKETS) or '‚Äî'}")
                    else:
                        tg_send(chat_id, f"{m} –Ω–µ —É —Å–ø–∏—Å–∫—É.")

                elif cmd == "/markets":
                    tg_send(chat_id, f"üìä –ü–∞—Ä–∞–º–∏ —Å–ª—ñ–¥–∫—É—é: {', '.join(MARKETS)}")

                elif cmd == "/amount":
                    if len(parts) < 2:
                        tg_send(chat_id, f"–ü–æ—Ç–æ—á–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞ —Å—É–º–∞: {TRADE_AMOUNT} USDT")
                        continue
                    try:
                        TRADE_AMOUNT = float(parts[1])
                        tg_send(chat_id, f"‚úÖ –ù–æ–≤–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞ —Å—É–º–∞: {TRADE_AMOUNT} USDT")
                    except:
                        tg_send(chat_id, "–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")

                elif cmd == "/setamount":
                    if len(parts) < 3:
                        tg_send(chat_id, "–ü—Ä–∏–∫–ª–∞–¥: /setamount BTC_USDT 5")
                        continue
                    m = normalize_market(parts[1])
                    try:
                        OVERRIDE_AMOUNT[m] = float(parts[2])
                        tg_send(chat_id, f"‚úÖ –°—É–º–∞ –¥–ª—è {m}: {OVERRIDE_AMOUNT[m]} USDT")
                    except:
                        tg_send(chat_id, "–°—É–º–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")

                elif cmd == "/settp":
                    if len(parts) < 2:
                        tg_send(chat_id, f"–ü–æ—Ç–æ—á–Ω–∏–π TP: {TAKE_PROFIT_P}%")
                        continue
                    try:
                        TAKE_PROFIT_P = float(parts[1])
                        tg_send(chat_id, f"‚úÖ TP –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {TAKE_PROFIT_P}%")
                    except:
                        tg_send(chat_id, "–í–∫–∞–∂–∏ —á–∏—Å–ª–æ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö.")

                elif cmd == "/setsl":
                    if len(parts) < 2:
                        tg_send(chat_id, f"–ü–æ—Ç–æ—á–Ω–∏–π SL: {STOP_LOSS_P}%")
                        continue
                    try:
                        STOP_LOSS_P = float(parts[1])
                        tg_send(chat_id, f"‚úÖ SL –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {STOP_LOSS_P}%")
                    except:
                        tg_send(chat_id, "–í–∫–∞–∂–∏ —á–∏—Å–ª–æ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö.")

                elif cmd == "/auto":
                    if len(parts) < 2:
                        tg_send(chat_id, f"–ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è: {'ON' if AUTO_TRADING else 'OFF'}")
                    else:
                        AUTO_TRADING = (parts[1].lower() == "on")
                        tg_send(chat_id, f"–ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è {'—É–≤—ñ–º–∫–Ω–µ–Ω–∞' if AUTO_TRADING else '–≤–∏–º–∫–Ω–µ–Ω–∞'}.")

                elif cmd == "/trade":
                    if len(parts) < 2:
                        tg_send(chat_id, f"–†–µ–∞–ª—å–Ω—ñ –æ—Ä–¥–µ—Ä–∏: {'ON' if REAL_TRADING else 'OFF'}")
                    else:
                        REAL_TRADING = (parts[1].lower() == "on")
                        tg_send(chat_id, f"–†–µ–∞–ª—å–Ω—ñ –æ—Ä–¥–µ—Ä–∏ {'—É–≤—ñ–º–∫–Ω–µ–Ω—ñ' if REAL_TRADING else '–≤–∏–º–∫–Ω–µ–Ω—ñ'}.")

                elif cmd == "/status":
                    pairs = ", ".join(MARKETS)
                    amps = ", ".join([f"{k}:{v}USDT" for k,v in OVERRIDE_AMOUNT.items()]) or "‚Äî"
                    tg_send(chat_id,
                        f"üìã –°—Ç–∞—Ç—É—Å:\n"
                        f"–ü–∞—Ä–∏: {pairs}\n"
                        f"–ì–ª–æ–±–∞–ª—å–Ω–∞ —Å—É–º–∞: {TRADE_AMOUNT} USDT\n"
                        f"–ü–µ—Ä-–ø–∞—Ä–∏ —Å—É–º–∏: {amps}\n"
                        f"AUTO: {'ON' if AUTO_TRADING else 'OFF'} | TRADE: {'ON' if REAL_TRADING else 'OFF'}\n"
                        f"TP: {TAKE_PROFIT_P}% | SL: {STOP_LOSS_P}%"
                    )

                else:
                    tg_send(chat_id, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /help")

            # run autotrade every 60s
            if AUTO_TRADING and main_chat_id and (time.time() - last_auto >= 60):
                auto_trade_once(main_chat_id)
                last_auto = time.time()

        except Exception as e:
            log(f"[loop] {e}")
            time.sleep(3)

if __name__ == "__main__":
    run_bot()
