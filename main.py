# main.py ‚Äî WhiteBIT Smart Bot (v4-ready, clean)
import asyncio
import base64
import hashlib
import hmac
import json
import logging
import os
import time
from typing import Dict, Any, Optional

import httpx
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from dotenv import load_dotenv

# ---------------- CONFIG ----------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_KEY = os.getenv("API_KEY")
API_SECRET = os.getenv("API_SECRET")

if not (BOT_TOKEN and API_KEY and API_SECRET):
    raise RuntimeError("BOT_TOKEN / API_KEY / API_SECRET must be set in environment")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# WhiteBIT base (–≤–∞–∂–ª–∏–≤–æ: –±–µ–∑ /api/v4 —É BASE_URL)
BASE_URL = "https://whitebit.com"
MARKETS_FILE = "markets.json"
markets: Dict[str, Dict[str, Any]] = {}

# ---------------- JSON SAVE/LOAD ----------------
def save_markets():
    try:
        with open(MARKETS_FILE, "w", encoding="utf-8") as f:
            json.dump(markets, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è markets.json: {e}")

def load_markets():
    global markets
    if os.path.exists(MARKETS_FILE):
        try:
            with open(MARKETS_FILE, "r", encoding="utf-8") as f:
                markets = json.load(f)
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è markets.json: {e}")
            markets = {}
    else:
        markets = {}
        save_markets()

# ---------------- TIME/HELPERS ----------------
def now_ms() -> int:
    return int(time.time() * 1000)

def _payload_and_headers(path: str, extra_body: Optional[dict] = None) -> tuple[bytes, dict]:
    """
    WhiteBIT v4 auth:
      body JSON –º—ñ—Å—Ç–∏—Ç—å: request (–ø–æ–≤–Ω–∏–π —à–ª—è—Ö), nonce (ms), + –¥–æ–¥.–ø–æ–ª—è
      X-TXC-PAYLOAD = base64(body_bytes)
      X-TXC-SIGNATURE = hex(HMAC_SHA512(payload_b64, API_SECRET))
    """
    body = {"request": path, "nonce": now_ms()}
    if extra_body:
        body.update(extra_body)

    body_bytes = json.dumps(body, separators=(",", ":"), ensure_ascii=False).encode()
    payload_b64 = base64.b64encode(body_bytes)
    signature = hmac.new(API_SECRET.encode(), payload_b64, hashlib.sha512).hexdigest()

    headers = {
        "Content-Type": "application/json",
        "X-TXC-APIKEY": API_KEY,
        "X-TXC-PAYLOAD": payload_b64.decode(),
        "X-TXC-SIGNATURE": signature,
    }
    return body_bytes, headers

# ---------------- HTTP (WhiteBIT v4) ----------------
async def public_get(path: str) -> dict:
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.get(BASE_URL + path)
        try:
            return r.json()
        except Exception:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è public –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {r.text}")
            return {"error": r.text}

async def private_post(path: str, extra_body: Optional[dict] = None) -> dict:
    body_bytes, headers = _payload_and_headers(path, extra_body)
    async with httpx.AsyncClient(timeout=30) as client:
        r = await client.post(BASE_URL + path, headers=headers, content=body_bytes)
        try:
            data = r.json()
        except Exception:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è private –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {r.text}")
            return {"error": r.text}

        # WhiteBIT –º–æ–∂–µ –≤—ñ–¥–¥–∞–≤–∞—Ç–∏ {"success": False, "message": "..."}:
        if isinstance(data, dict) and (data.get("success") is False) and "message" in data:
            logging.error(f"WhiteBIT error: {data.get('message')}")
        return data

# ---------------- WHITEBIT API WRAPPERS ----------------
async def get_balance() -> dict:
    # POST /api/v4/trade-account/balance
    data = await private_post("/api/v4/trade-account/balance")
    logging.info(f"DEBUG balance: {data}")
    return data if isinstance(data, dict) else {}

async def place_market_order(market: str, side: str, amount: float) -> dict:
    # POST /api/v4/order/market
    return await private_post("/api/v4/order/market", {
        "market": market,           # "BTC_USDT"
        "side": side,               # "buy" | "sell"
        "amount": amount,           # ‚Üê —á–∏—Å–ª–æ, –Ω–µ str
        "type": "market",
    })

async def place_limit_order(market: str, side: str, price: float, amount: float,
                            client_order_id: Optional[str] = None, post_only: Optional[bool] = None,
                            stp: Optional[str] = None) -> dict:
    # POST /api/v4/order/new
async def place_limit_order(market: str, side: str, price: float, amount: float,
                            client_order_id: Optional[str] = None, post_only: Optional[bool] = None,
                            stp: Optional[str] = None) -> dict:
    body = {
        "market": market,
        "side": side,
        "amount": amount,   # ‚Üê —á–∏—Å–ª–æ
        "price": price,     # ‚Üê —á–∏—Å–ª–æ
        "type": "limit",
    }
    if client_order_id:
        body["clientOrderId"] = str(client_order_id)
    if post_only is not None:
        body["postOnly"] = bool(post_only)
    if stp:
        body["stp"] = st
    return await private_post("/api/v4/order/new", body)

async def active_orders(market: Optional[str] = None) -> dict:
    # POST /api/v4/orders ‚Äî –∞–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏ (–º–æ–∂–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –ø–æ market)
    body = {}
    if market:
        body["market"] = market
    return await private_post("/api/v4/orders", body)

async def cancel_order(market: str, order_id: Optional[int] = None, client_order_id: Optional[str] = None) -> dict:
    # POST /api/v4/order/cancel ‚Äî –ø–æ—Ç—Ä—ñ–±–µ–Ω market —ñ orderId –∞–±–æ clientOrderId
    body = {"market": market}
    if client_order_id:
        body["clientOrderId"] = str(client_order_id)
    elif order_id is not None:
        body["orderId"] = str(order_id)
    else:
        return {"success": False, "message": "–ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ order_id –∞–±–æ client_order_id"}
    return await private_post("/api/v4/order/cancel", body)

# ---------------- PUBLIC TICKER ----------------
async def get_last_price(market: str) -> Optional[float]:
    # GET /api/v4/public/ticker -> { "BTC_USDT": {"last_price":"..."} , ... }
    t = await public_get("/api/v4/public/ticker")
    try:
        lp = t.get(market, {}).get("last_price")
        return float(lp) if lp is not None else None
    except Exception:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∑—è—Ç–∏ last_price –¥–ª—è {market}: {t}")
        return None

# ---------------- BOT COMMANDS ----------------
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç –¥–ª—è WhiteBIT.\n"
        "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
    )

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "<b>–û—Å–Ω–æ–≤–Ω—ñ:</b>\n"
        "/start ‚Äî –≤—ñ—Ç–∞–Ω–Ω—è\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n\n"
        "<b>–¢–æ—Ä–≥–æ–≤—ñ:</b>\n"
        "/balance ‚Äî –±–∞–ª–∞–Ω—Å\n"
        "/market BTC/USDT ‚Äî –¥–æ–¥–∞—Ç–∏ —Ä–∏–Ω–æ–∫\n"
        "/settp BTC/USDT 5 ‚Äî TP —É %\n"
        "/setsl BTC/USDT 2 ‚Äî SL —É %\n"
        "/setbuy BTC/USDT 30 ‚Äî –∫—É–ø—ñ–≤–ª—è –Ω–∞ 30 USDT\n"
        "/buy BTC/USDT ‚Äî —Ä–∞–∑–æ–≤–∞ –∫—É–ø—ñ–≤–ª—è\n"
        "/status ‚Äî –∞–∫—Ç–∏–≤–Ω—ñ —Ä–∏–Ω–∫–∏\n"
        "/stop ‚Äî –∑—É–ø–∏–Ω—è—î —Ç–æ—Ä–≥—ñ–≤–ª—é\n"
        "/removemarket BTC/USDT ‚Äî –≤–∏–¥–∞–ª—è—î —Ä–∏–Ω–æ–∫\n\n"
        "<b>–¢–µ—Ö–Ω—ñ—á–Ω—ñ:</b>\n"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ª–æ–≥—ñ–∫–∏\n"
        "/autotrade BTC/USDT on|off ‚Äî —É–≤—ñ–º–∫/–≤–∏–º–∫ –∞–≤—Ç–æ—Ç—Ä–µ–π–¥"
    )

@dp.message(Command("balance"))
async def balance_cmd(message: types.Message):
    data = await get_balance()
    if not data or not isinstance(data, dict):
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å.")
        return

    lines = []
    for asset, info in sorted(data.items()):
        try:
            available = float(info.get("available", 0))
            freeze = float(info.get("freeze", 0))
        except Exception:
            available, freeze = 0.0, 0.0
        if available > 0 or freeze > 0:
            lines.append(f"{asset}: {available} (freeze {freeze})")

    text = "üí∞ <b>–ë–∞–ª–∞–Ω—Å</b>:\n" + ("\n".join(lines) if lines else "0 –Ω–∞ –≤—Å—ñ—Ö –≥–∞–º–∞–Ω—Ü—è—Ö")
    await message.answer(text)

@dp.message(Command("market"))
async def market_cmd(message: types.Message):
    try:
        _, market = message.text.split()
        market = market.upper().replace("/", "_")  # BTC/USDT -> BTC_USDT
        markets[market] = {
            "tp": None,            # % take-profit
            "sl": None,            # % stop-loss
            "orders": [],          # —Å–ø–∏—Å–æ–∫ –æ—Ä–¥–µ—Ä—ñ–≤ [{"id":..., "cid":..., "type":"tp|sl", "market":...}]
            "autotrade": False,
            "buy_usdt": 10,
            "chat_id": message.chat.id,
        }
        save_markets()
        await message.answer(f"‚úÖ –î–æ–¥–∞–Ω–æ —Ä–∏–Ω–æ–∫ {market} (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 10 USDT)")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /market BTC/USDT")

@dp.message(Command("settp"))
async def settp_cmd(message: types.Message):
    try:
        _, market, percent = message.text.split()
        market = market.upper().replace("/", "_")
        markets[market]["tp"] = float(percent)
        save_markets()
        await message.answer(f"üìà TP –¥–ª—è {market}: {percent}%")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /settp BTC/USDT 5")

@dp.message(Command("setsl"))
async def setsl_cmd(message: types.Message):
    try:
        _, market, percent = message.text.split()
        market = market.upper().replace("/", "_")
        markets[market]["sl"] = float(percent)
        save_markets()
        await message.answer(f"üìâ SL –¥–ª—è {market}: {percent}%")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setsl BTC/USDT 2")

@dp.message(Command("setbuy"))
async def setbuy_cmd(message: types.Message):
    try:
        _, market, usdt = message.text.split()
        market = market.upper().replace("/", "_")
        usdt = float(usdt)
        if usdt <= 0:
            await message.answer("‚ö†Ô∏è –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0.")
            return
        markets[market]["buy_usdt"] = usdt
        save_markets()
        await message.answer(f"üìä –î–ª—è {market} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {usdt} USDT –Ω–∞ –∫–æ–∂–Ω—É –∫—É–ø—ñ–≤–ª—é.")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /setbuy BTC/USDT 30")

@dp.message(Command("autotrade"))
async def autotrade_cmd(message: types.Message):
    try:
        _, market, mode = message.text.split()
        market = market.upper().replace("/", "_")
        if market not in markets:
            await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π —Ä–∏–Ω–æ–∫ —á–µ—Ä–µ–∑ /market.")
            return
        if mode.lower() == "on":
            markets[market]["autotrade"] = True
            save_markets()
            await message.answer(f"‚ôªÔ∏è –ê–≤—Ç–æ—Ç—Ä–µ–π–¥ –¥–ª—è {market} —É–≤—ñ–º–∫–Ω–µ–Ω–æ.")
        elif mode.lower() == "off":
            markets[market]["autotrade"] = False
            save_markets()
            await message.answer(f"‚èπÔ∏è –ê–≤—Ç–æ—Ç—Ä–µ–π–¥ –¥–ª—è {market} –≤–∏–º–∫–Ω–µ–Ω–æ.")
        else:
            await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /autotrade BTC/USDT on|off")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /autotrade BTC/USDT on|off")

# ---------------- TRADE LOGIC ----------------
def _extract_order_id(resp: dict) -> Optional[int]:
    """
    WhiteBIT —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–∂–µ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ 'orderId' –∞–±–æ 'id'.
    """
    if not isinstance(resp, dict):
        return None
    if "orderId" in resp:
        try:
            return int(resp["orderId"])
        except Exception:
            return None
    if "id" in resp:
        try:
            return int(resp["id"])
        except Exception:
            return None
    return None

async def start_new_trade(market: str, cfg: dict):
    # 1) –ë–∞–ª–∞–Ω—Å
    balances = await get_balance()
    usdt_av = (balances.get("USDT") or {}).get("available", 0)
    try:
        usdt = float(usdt_av)
    except Exception:
        usdt = 0.0

    spend = float(cfg.get("buy_usdt", 10.0))
    if usdt < spend:
        logging.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ USDT –¥–ª—è {market}. –Ñ {usdt}, —Ç—Ä–µ–±–∞ {spend}.")
        return

    # 2) –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞
    last_price = await get_last_price(market)
    if not last_price or last_price <= 0:
        logging.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ last_price –¥–ª—è {market}.")
        return

    # 3) –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ (–±–∞–∑–æ–≤–∞ –º–æ–Ω–µ—Ç–∞)
    base_amount = round(spend / last_price, 8)
    if base_amount <= 0:
        logging.error(f"–ù—É–ª—å–æ–≤–∏–π –æ–±—Å—è–≥ –±–∞–∑–æ–≤–æ—ó –º–æ–Ω–µ—Ç–∏: spend={spend}, price={last_price}")
        return

    # 4) –ö—É–ø—ñ–≤–ª—è market
    buy_res = await place_market_order(market, "buy", base_amount)
    if isinstance(buy_res, dict) and buy_res.get("success") is False:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∫—É–ø—ñ–≤–ª—ñ: {buy_res}")
        return
    logging.info(f"BUY placed: {buy_res}")

    # 5) –°—Ç–≤–æ—Ä–µ–Ω–Ω—è TP/SL —è–∫ –æ–∫—Ä–µ–º–∏—Ö –ª—ñ–º—ñ—Ç—ñ–≤ (–¥–∑–µ—Ä–∫–∞–ª—å–Ω–µ OCO)
    cfg["orders"] = []
    # –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è ‚Äî clientOrderId (–∑—Ä—É—á–Ω—ñ—à–µ –¥–ª—è cancel)
    ts = now_ms()

    if cfg.get("tp"):
        tp_price = round(last_price * (1 + float(cfg["tp"]) / 100), 6)
        cid = f"wb-{market}-tp-{ts}"
        tp_order = await place_limit_order(market, "sell", tp_price, base_amount,
                                           client_order_id=cid, stp="cancel_new")
        oid = _extract_order_id(tp_order)
        if oid:
            cfg["orders"].append({"id": oid, "cid": cid, "type": "tp", "market": market})

    if cfg.get("sl"):
        sl_price = round(last_price * (1 - float(cfg["sl"]) / 100), 6)
        cid = f"wb-{market}-sl-{ts}"
        sl_order = await place_limit_order(market, "sell", sl_price, base_amount,
                                           client_order_id=cid, stp="cancel_new")
        oid = _extract_order_id(sl_order)
        if oid:
            cfg["orders"].append({"id": oid, "cid": cid, "type": "sl", "market": market})

    save_markets()

@dp.message(Command("buy"))
async def buy_cmd(message: types.Message):
    try:
        _, market = message.text.split()
        market = market.upper().replace("/", "_")
        if market not in markets:
            await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π —Ä–∏–Ω–æ–∫ —á–µ—Ä–µ–∑ /market.")
            return
        await start_new_trade(market, markets[market])
        await message.answer(f"‚úÖ –ö—É–ø—ñ–≤–ª—è {market} –≤–∏–∫–æ–Ω–∞–Ω–∞ –Ω–∞ {markets[market]['buy_usdt']} USDT.")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /buy BTC/USDT")

@dp.message(Command("status"))
async def status_cmd(message: types.Message):
    if not markets:
        await message.answer("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∏–Ω–∫—ñ–≤ –Ω–µ–º–∞—î.")
        return
    text = "üìä <b>–°—Ç–∞—Ç—É—Å</b>:\n"
    for m, cfg in markets.items():
        text += (
            f"\n{m}:\n"
            f" TP: {cfg['tp']}%\n"
            f" SL: {cfg['sl']}%\n"
            f" Buy: {cfg['buy_usdt']} USDT\n"
            f" –ê–≤—Ç–æ—Ç—Ä–µ–π–¥: {cfg['autotrade']}\n"
            f" –û—Ä–¥–µ—Ä—ñ–≤: {len(cfg.get('orders', []))}\n"
        )
    await message.answer(text)

@dp.message(Command("removemarket"))
async def removemarket_cmd(message: types.Message):
    try:
        _, market = message.text.split()
        market = market.upper().replace("/", "_")
        if market in markets:
            del markets[market]
            save_markets()
            await message.answer(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ {market}")
        else:
            await message.answer("‚ùå –†–∏–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception:
        await message.answer("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /removemarket BTC/USDT")

@dp.message(Command("stop"))
async def stop_cmd(message: types.Message):
    markets.clear()
    save_markets()
    await message.answer("‚èπÔ∏è –¢–æ—Ä–≥—ñ–≤–ª—é –∑—É–ø–∏–Ω–µ–Ω–æ. –í—Å—ñ —Ä–∏–Ω–∫–∏ –æ—á–∏—â–µ–Ω–æ.")

@dp.message(Command("restart"))
async def restart_cmd(message: types.Message):
    for m in markets:
        markets[m]["orders"] = []
    save_markets()
    await message.answer("üîÑ –õ–æ–≥—ñ–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.")

# ---------------- MONITOR ----------------
async def monitor_orders():
    """
    –ö–æ–∂–Ω—ñ 10—Å –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏.
    –Ø–∫—â–æ –æ–¥–∏–Ω —ñ–∑ –ø–∞—Ä–∏ TP/SL –∑–∞–∫—Ä–∏–≤—Å—è ‚Äî –≤—ñ–¥–º—ñ–Ω—è—î–º–æ —ñ–Ω—à–∏–π —ñ (—è–∫—â–æ autotrade) –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —Ü–∏–∫–ª.
    """
    while True:
        try:
            for market, cfg in list(markets.items()):
                # –¢—è–≥–Ω–µ–º–æ –∞–∫—Ç–∏–≤–Ω—ñ –æ—Ä–¥–µ—Ä–∏ –ø–æ –º–∞—Ä–∫–µ—Ç—É, –≤–∏–¥—ñ–ª—è—î–º–æ —ó—Ö ID (—Ä—è–¥–∫–æ–≤—ñ, –∞–ª–µ –º–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ int)
                act = await active_orders(market)
                active_ids = set()
                if isinstance(act, dict):
                    # —Ñ–æ—Ä–º–∞—Ç –º–æ–∂–µ –±—É—Ç–∏ {"orders":[{...}], ...} –∞–±–æ { ... "orderId": ... }
                    orders_list = act.get("orders") if isinstance(act.get("orders"), list) else None
                    if orders_list:
                        for o in orders_list:
                            # WhiteBIT —á–∞—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î 'orderId' –∞–±–æ 'id'
                            oid = None
                            if isinstance(o, dict):
                                if "orderId" in o:
                                    oid = int(str(o["orderId"]))
                                elif "id" in o:
                                    oid = int(str(o["id"]))
                            if oid is not None:
                                active_ids.add(oid)

                # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—à—ñ –≤—ñ–¥—Å–ª—ñ–¥–∫–æ–≤—É–≤–∞–Ω—ñ –æ—Ä–¥–µ—Ä–∏
                finished_any = None
                for entry in list(cfg.get("orders", [])):
                    if entry["id"] not in active_ids:
                        # —Ü—å–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ –±—ñ–ª—å—à–µ –Ω–µ–º–∞—î –≤ –∞–∫—Ç–∏–≤–Ω–∏—Ö -> –≤–≤–∞–∂–∞—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–∏–º/–∑–∞–∫—Ä–∏—Ç–∏–º/–≤—ñ–¥—Ö–∏–ª–µ–Ω–∏–º
                        finished_any = entry
                        break

                if finished_any:
                    # –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏
                    await bot.send_message(
                        chat_id=cfg.get("chat_id", 0) or 0,
                        text=f"‚úÖ –û—Ä–¥–µ—Ä {finished_any['id']} ({market}, {finished_any['type']}) –∑–∞–∫—Ä–∏—Ç–æ!"
                    )
                    # —Å–∫–∞—Å—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π —ñ–∑ –ø–∞—Ä–∏
                    for entry in list(cfg["orders"]):
                        if entry["id"] != finished_any["id"]:
                            await cancel_order(market, order_id=entry["id"])
                    cfg["orders"].clear()
                    save_markets()

                    # –∞–≤—Ç–æ—Ç—Ä–µ–π–¥ ‚Äî –æ–¥—Ä–∞–∑—É –Ω–æ–≤–∞ —É–≥–æ–¥–∞
                    if cfg.get("autotrade"):
                        await bot.send_message(
                            chat_id=cfg.get("chat_id", 0) or 0,
                            text=f"‚ôªÔ∏è –ê–≤—Ç–æ—Ç—Ä–µ–π–¥ {market}: –Ω–æ–≤–∞ —É–≥–æ–¥–∞ –Ω–∞ {cfg['buy_usdt']} USDT"
                        )
                        await start_new_trade(market, cfg)

        except Exception as e:
            logging.error(f"Monitor error: {e}")

        await asyncio.sleep(10)

# ---------------- RUN ----------------
async def main():
    load_markets()
    logging.info("üöÄ Bot is running and waiting for commands...")

    # –í–∏–º–∫–Ω—É—Ç–∏ webhook —ñ —Å–∫–∏–Ω—É—Ç–∏ pending –ø–µ—Ä–µ–¥ polling (–≤–∞–∂–ª–∏–≤–æ –¥–ª—è Render/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—ñ–≤)
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("‚úÖ Webhook –æ—á–∏—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
    except Exception as e:
        logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è webhook: {e}")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä
    asyncio.create_task(monitor_orders())

    # –°—Ç–∞—Ä—Ç polling
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    try:
        print("‚úÖ main.py started")
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("üõë Bot stopped manually")
