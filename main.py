import os
import sys
import logging
import asyncio
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    print("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É .env —Ñ–∞–π–ª—ñ")
    sys.exit(1)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
AUTO_TRADE = False
MARKETS = []
DEFAULT_AMOUNT = {}
TP_MAP = {}
SL_MAP = {}

VALID_QUOTE_ASSETS = {"USDT", "USDC", "BTC", "ETH"}

def is_valid_market(m: str) -> bool:
    if "_" not in m:
        return False
    base, quote = m.split("_", 1)
    return bool(base) and quote in VALID_QUOTE_ASSETS

# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π. –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –ø—Ä–∞—Ü—é—î, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "/price <—Ä–∏–Ω–æ–∫> ‚Äî —Ü—ñ–Ω–∞\n"
        "/balance ‚Äî –±–∞–ª–∞–Ω—Å\n"
        "/buy <—Ä–∏–Ω–æ–∫> [—Å—É–º–∞] ‚Äî –∫—É–ø–∏—Ç–∏\n"
        "/sell <—Ä–∏–Ω–æ–∫> [—Å—É–º–∞] ‚Äî –ø—Ä–æ–¥–∞—Ç–∏\n"
        "/setamount <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî –¥–µ—Ñ–æ–ª—Ç–Ω–∞ —Å—É–º–∞\n"
        "/market <—Ä–∏–Ω–æ–∫> ‚Äî –¥–æ–¥–∞—Ç–∏ —Ä–∏–Ω–æ–∫\n"
        "/removemarket <—Ä–∏–Ω–æ–∫> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–∏–Ω–æ–∫\n"
        "/settp <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ TP\n"
        "/setsl <—Ä–∏–Ω–æ–∫> <–≤—ñ–¥—Å–æ—Ç–æ–∫> ‚Äî –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ SL\n"
        "/status ‚Äî –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∏ —Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏\n"
        "/auto on|off ‚Äî –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è\n"
        "/stop ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞\n"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"
    )
    await update.message.reply_text(text)

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not MARKETS:
        await update.message.reply_text("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø–∞—Ä")
        return
    lines = []
    for m in [x for x in MARKETS if is_valid_market(x)]:
        amt = DEFAULT_AMOUNT.get(m, "‚Äî")
        tp = TP_MAP.get(m, "‚Äî")
        sl = SL_MAP.get(m, "‚Äî")
        lines.append(f"{m}: amount={amt}, TP={tp}, SL={sl}")
    await update.message.reply_text("\n".join(lines))

async def market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /market BTC_USDT")
        return
    m = context.args[0]
    if not is_valid_market(m):
        await update.message.reply_text("‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä–∏–Ω–æ–∫")
        return
    if m not in MARKETS:
        MARKETS.append(m)
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {m}")

async def removemarket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /removemarket BTC_USDT")
        return
    m = context.args[0]
    if m in MARKETS:
        MARKETS.remove(m)
        await update.message.reply_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ {m}")
    else:
        await update.message.reply_text(f"{m} –Ω–µ –±—É–ª–æ –≤ —Å–ø–∏—Å–∫—É")

async def auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global AUTO_TRADE
    if not context.args:
        await update.message.reply_text(f"–ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è {'—É–≤—ñ–º–∫–Ω–µ–Ω–∞' if AUTO_TRADE else '–≤–∏–º–∫–Ω–µ–Ω–∞'}")
        return
    if context.args[0].lower() == "on":
        AUTO_TRADE = True
        await update.message.reply_text("‚úÖ –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–∞")
    elif context.args[0].lower() == "off":
        AUTO_TRADE = False
        await update.message.reply_text("‚è∏ –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –≤–∏–º–∫–Ω–µ–Ω–∞")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚èπ –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞")
    await context.application.stop()

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    os.execv(sys.executable, ["python"] + sys.argv)

async def trade_loop(app: Application):
    while True:
        if AUTO_TRADE and MARKETS:
            for m in [x for x in MARKETS if is_valid_market(x)]:
                logging.info(f"üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–Ω–∫—É {m}")
                # –õ–æ–≥—ñ–∫–∞ —Ç–æ—Ä–≥—ñ–≤–ª—ñ –±—É–¥–µ —Ç—É—Ç
        await asyncio.sleep(5)

async def hourly_report(app: Application):
    while True:
        if MARKETS:
            text = "\n".join([f"{m}: amount={DEFAULT_AMOUNT.get(m,'‚Äî')}, TP={TP_MAP.get(m,'‚Äî')}, SL={SL_MAP.get(m,'‚Äî')}" for m in MARKETS])
            for chat_id in app.chat_ids:
                await app.bot.send_message(chat_id=chat_id, text=f"üìä –©–æ–≥–æ–¥–∏–Ω–Ω–∏–π –∑–≤—ñ—Ç:\n{text}")
        await asyncio.sleep(3600)

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("market", market))
    app.add_handler(CommandHandler("removemarket", removemarket))
    app.add_handler(CommandHandler("auto", auto))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("restart", restart))

    asyncio.get_running_loop().create_task(trade_loop(app))
    asyncio.get_running_loop().create_task(hourly_report(app))

    import asyncio

    # –ê–≤—Ç–æ–∑–Ω—è—Ç—Ç—è –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ polling
    try:
        asyncio.run(app.bot.delete_webhook())
    except Exception as e:
        print(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω—è—Ç–∏ –≤–µ–±—Ö—É–∫: {e}")

    app.run_polling()

if __name__ == "__main__":
    main()
