import os
import asyncio
import logging
import json
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
WHITEBIT_API_KEY = os.getenv("WHITEBIT_API_KEY")
WHITEBIT_SECRET = os.getenv("WHITEBIT_SECRET")

logging.basicConfig(level=logging.INFO)
markets = {}
auto_trade = False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –≤–∏–º–∫–Ω–µ–Ω–∞.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/market <—Ä–∏–Ω–æ–∫> ‚Äî –¥–æ–¥–∞—Ç–∏ —Ä–∏–Ω–æ–∫\n"
        "/removemarket <—Ä–∏–Ω–æ–∫> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–∏–Ω–æ–∫\n"
        "/setamount <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî –¥–µ—Ñ–æ–ª—Ç–Ω–∞ —Å—É–º–∞\n"
        "/settp <—Ä–∏–Ω–æ–∫> <TP%> ‚Äî take-profit\n"
        "/setsl <—Ä–∏–Ω–æ–∫> <SL%> ‚Äî stop-loss\n"
        "/auto on|off ‚Äî –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è\n"
        "/status ‚Äî —Å—Ç–∞—Ç—É—Å —Ä–∏–Ω–∫—ñ–≤\n"
        "/balance ‚Äî –±–∞–ª–∞–Ω—Å –∞–∫–∞—É–Ω—Ç–∞\n"
        "/buy <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî –∫—É–ø–∏—Ç–∏\n"
        "/sell <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞> ‚Äî –ø—Ä–æ–¥–∞—Ç–∏\n"
        "/stop ‚Äî –∑—É–ø–∏–Ω–∏—Ç–∏ –±–æ—Ç–∞\n"
        "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞"
    )

async def market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("‚ö†Ô∏è –í–∫–∞–∂–∏ —Ä–∏–Ω–æ–∫, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /market BTC_USDT")
        return
    market = context.args[0].upper()
    markets[market] = {"amount": None, "tp": None, "sl": None}
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {market}")

async def setamount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 2:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /setamount BTC_USDT 5")
        return
    market, amount = context.args[0].upper(), context.args[1]
    if market not in markets:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π —Ä–∏–Ω–æ–∫ /market")
        return
    markets[market]["amount"] = float(amount)
    await update.message.reply_text(f"–°—É–º–∞ –¥–ª—è {market}: {amount}")

async def settp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 2:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /settp BTC_USDT 0.5")
        return
    market, tp = context.args[0].upper(), context.args[1]
    if market not in markets:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π —Ä–∏–Ω–æ–∫ /market")
        return
    markets[market]["tp"] = float(tp)
    await update.message.reply_text(f"TP –¥–ª—è {market}: {tp}%")

async def setsl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 2:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /setsl BTC_USDT 0.3")
        return
    market, sl = context.args[0].upper(), context.args[1]
    if market not in markets:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π —Ä–∏–Ω–æ–∫ /market")
        return
    markets[market]["sl"] = float(sl)
    await update.message.reply_text(f"SL –¥–ª—è {market}: {sl}%")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not markets:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ —Ä–∏–Ω–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        return
    reply = "üìä –ü–æ—Ç–æ—á–Ω—ñ —Ä–∏–Ω–∫–∏:\n"
    for m, data in markets.items():
        reply += f"{m}: amount={data['amount']}, TP={data['tp']}, SL={data['sl']}\n"
    await update.message.reply_text(reply)

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ‚ö†Ô∏è –¢—É—Ç –º–æ–∂–Ω–∞ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –Ω–∞ WhiteBIT API
    await update.message.reply_text("üí∞ –ë–∞–ª–∞–Ω—Å: 100 USDT (–¥–µ–º–æ)")

async def auto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global auto_trade
    if not context.args or context.args[0] not in ["on", "off"]:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /auto on|off")
        return
    auto_trade = context.args[0] == "on"
    await update.message.reply_text("ü§ñ –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–∞" if auto_trade else "‚è∏ –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –≤–∏–º–∫–Ω–µ–Ω–∞")

async def trade_loop():
    while True:
        if auto_trade:
            logging.info("‚úÖ –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è...")
            # –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–Ω —ñ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –æ—Ä–¥–µ—Ä—ñ–≤
        await asyncio.sleep(10)

async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    await app.bot.delete_webhook(drop_pending_updates=True)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("market", market))
    app.add_handler(CommandHandler("setamount", setamount))
    app.add_handler(CommandHandler("settp", settp))
    app.add_handler(CommandHandler("setsl", setsl))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("auto", auto))

    asyncio.create_task(trade_loop())
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
