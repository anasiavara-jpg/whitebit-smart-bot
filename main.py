# -*- coding: utf-8 -*-
"""
Telegram ‚Üí WhiteBIT trading bot
- –†–µ–∞–ª—å–Ω–∞ —Ç–æ—Ä–≥—ñ–≤–ª—è (—è–∫—â–æ TRADING_ENABLED=true —ñ —î –∫–ª—é—á—ñ)
- –ö–µ—Ä—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥–∏ –≤ Telegram
- –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –∑ TP/SL —ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏
- –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É (file lock)
- –©–æ–≥–æ–¥–∏–Ω–Ω–∏–π –∑–≤—ñ—Ç
"""

import os
import sys
import json
import hmac
import time
import fcntl
import base64
import hashlib
import logging
from typing import Dict, Any, Optional
from dataclasses import dataclass

import requests
from dotenv import load_dotenv

from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, JobQueue

# ========= Env & Logging =========

load_dotenv()
BOT_TOKEN = (os.getenv("BOT_TOKEN") or os.getenv("TELEGRAM_TOKEN") or "").strip()
API_PUBLIC = (os.getenv("API_PUBLIC_KEY") or os.getenv("API_PUBLIC") or "").strip()
API_SECRET = (os.getenv("API_SECRET_KEY") or os.getenv("API_SECRET") or "").strip()
TRADING_ENABLED = (os.getenv("TRADING_ENABLED", "false").lower() in ["1", "true", "yes"])
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "").strip() or None  # –º–æ–∂–Ω–∞ –Ω–µ –∑–∞–¥–∞–≤–∞—Ç–∏ ‚Äî –≤—ñ–∑—å–º–µ–º–æ –∑ /start

if not BOT_TOKEN:
    print("üî¥ BOT_TOKEN –ø–æ—Ä–æ–∂–Ω—ñ–π. –î–æ–¥–∞–π BOT_TOKEN —É Environment.")
    sys.exit(0)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
log = logging.getLogger("tg-wb-bot")

TG_API = f"https://api.telegram.org/bot{BOT_TOKEN}"
WB_PUBLIC = "https://whitebit.com/api/v4/public"
WB_PRIVATE = "https://whitebit.com/api/v4"

# ========= Runtime State =========

VALID_QUOTE_ASSETS = {"USDT", "USDC", "BTC", "ETH"}

MARKETS = []  # –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: ["BTC_USDT", "DOGE_USDT"]
DEFAULT_AMOUNT: Dict[str, float] = {}  # —Å—É–º–∞ –≤ quote –¥–ª—è buy
TP_MAP: Dict[str, float] = {}          # %
SL_MAP: Dict[str, float] = {}          # %

AUTO_TRADE = True  # –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–∞
LAST_PRICES: Dict[str, float] = {}
OPEN_POS: Dict[str, Dict[str, float]] = {}  # market -> {"buy_price": float, "qty": float}

# —Ç—Ä–∏–≥–µ—Ä –ø–æ–∫—É–ø–∫–∏, —è–∫—â–æ —Ü—ñ–Ω–∞ –≤–ø–∞–ª–∞ –Ω–∞ X% –≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–æ—ó
DEFAULT_BUY_TRIGGER_PCT = float(os.getenv("BUY_TRIGGER_PCT", "0.4"))  # 0.4% –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

# ========= Helpers =========

def is_valid_market(m: str) -> bool:
    if "_" not in m:
        return False
    base, quote = m.split("_", 1)
    return bool(base) and quote in VALID_QUOTE_ASSETS

def normalize_market(s: str) -> str:
    s = s.strip().upper()
    if "_" not in s:
        s = f"{s}_USDT"
    return s

def tg_send(chat_id: int, text: str):
    try:
        requests.post(f"{TG_API}/sendMessage", json={"chat_id": chat_id, "text": text}, timeout=15)
    except Exception as e:
        log.error(f"[tg_send] {e}")

def price_fetch(market: str) -> Optional[float]:
    try:
        r = requests.get(f"{WB_PUBLIC}/ticker", params={"market": market}, timeout=15)
        r.raise_for_status()
        data = r.json() or {}
        if market in data and "last_price" in data[market]:
            return float(data[market]["last_price"])
        return None
    except Exception as e:
        log.error(f"[price] {market}: {e}")
        return None

# ========= WhiteBIT private =========

def validate_keys() -> Optional[str]:
    problems = []
    if not API_PUBLIC:
        problems.append("API_PUBLIC_KEY –ø–æ—Ä–æ–∂–Ω—ñ–π")
    if not API_SECRET:
        problems.append("API_SECRET_KEY –ø–æ—Ä–æ–∂–Ω—ñ–π")
    if problems:
        return "; ".join(problems)
    return None

def make_signature_payload(path: str, data: Optional[Dict[str, Any]] = None):
    if data is None:
        data = {}
    d = dict(data)
    d["request"] = path
    d["nonce"] = str(int(time.time() * 1000))
    body_json = json.dumps(d, separators=(",", ":"))
    payload_b64 = base64.b64encode(body_json.encode()).decode()
    # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ NoneType.encode
    if not API_SECRET:
        raise ValueError("API_SECRET –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
    signature = hmac.new(API_SECRET.encode(), body_json.encode(), hashlib.sha512).hexdigest()
    return body_json, payload_b64, signature

def wb_private_post(path: str, payload: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    try:
        body_json, payload_b64, signature = make_signature_payload(path, payload)
    except Exception as e:
        log.error(f"[WB SIGN] {e}")
        return {}
    headers = {
        "Content-Type": "application/json",
        "X-TXC-APIKEY": API_PUBLIC,
        "X-TXC-PAYLOAD": payload_b64,
        "X-TXC-SIGNATURE": signature,
    }
    try:
        r = requests.post(f"{WB_PRIVATE}{path}", data=body_json, headers=headers, timeout=30)
        log.info(f"[WB POST] {path} -> {r.status_code}")
        if r.text:
            log.debug(f"[WB RESP] {r.text[:500]}")
        r.raise_for_status()
        return r.json() if r.text else {}
    except Exception as e:
        log.error(f"[WB POST] {path} error: {e}")
        return {}

def wb_order_market(market: str, side: str, amount: float) -> Dict[str, Any]:
    # BUY: 'amount' —É WhiteBIT –¥–ª—è market buy ‚Äî —Ü–µ –æ–±—Å—è–≥ —É quote (USDT)
    # SELL: 'amount' ‚Äî —Ü–µ –∫—ñ–ª—å–∫—ñ—Å—Ç—å base
    payload = {"market": market.upper(), "side": side.lower(), "amount": str(amount)}
    return wb_private_post("/api/v4/order/market", payload)

def wb_balance(ticker: Optional[str] = None) -> Dict[str, str]:
    payload = {}
    if ticker:
        payload["ticker"] = ticker.upper()
    data = wb_private_post("/api/v4/main-account/balance", payload)
    # –ø–æ–≤–µ—Ä–Ω–µ–º–æ —Ç—ñ–ª—å–∫–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –±–∞–ª–∞–Ω—Å–∏
    res = {}
    for k, v in (data or {}).items():
        bal = v.get("main_balance") or "0"
        try:
            if float(bal) > 0:
                res[k] = bal
        except:
            pass
    return res

# ========= File lock (single instance) =========

LOCK_PATH = "/tmp/tg_wb_bot.lock"
def acquire_lock_or_exit():
    try:
        fd = os.open(LOCK_PATH, os.O_CREAT | os.O_RDWR, 0o644)
        fcntl.lockf(fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        os.write(fd, str(os.getpid()).encode())
    except OSError:
        log.error("‚ö†Ô∏è –Ü–Ω—à–∏–π —ñ–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ –≤–∂–µ –ø—Ä–∞—Ü—é—î (lock). –í–∏—Ö—ñ–¥ –±–µ–∑ –ø–∞–¥—ñ–Ω–Ω—è.")
        sys.exit(0)

# ========= Telegram commands =========

HELP = (
    "ü§ñ WhiteBIT –±–æ—Ç\n\n"
    "/price <—Ä–∏–Ω–æ–∫> ‚Äî —Ü—ñ–Ω–∞ (–Ω–∞–ø—Ä. /price BTC_USDT)\n"
    "/balance [—Ç–∏–∫–µ—Ä] ‚Äî –±–∞–ª–∞–Ω—Å(–∏)\n"
    "/buy <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞_quote> ‚Äî —Ä–∏–Ω–∫–æ–≤–∞ –ø–æ–∫—É–ø–∫–∞\n"
    "/sell <—Ä–∏–Ω–æ–∫> <–∫—ñ–ª—å–∫—ñ—Å—Ç—å_base> ‚Äî —Ä–∏–Ω–∫–æ–≤–∏–π –ø—Ä–æ–¥–∞–∂\n"
    "/market <—Ä–∏–Ω–æ–∫> ‚Äî –¥–æ–¥–∞—Ç–∏ —Ä–∏–Ω–æ–∫ —É —Å–ø–∏—Å–æ–∫\n"
    "/removemarket <—Ä–∏–Ω–æ–∫> ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ —Ä–∏–Ω–æ–∫\n"
    "/setamount <—Ä–∏–Ω–æ–∫> <—Å—É–º–∞_quote> ‚Äî –¥–µ—Ñ–æ–ª—Ç–Ω–∞ —Å—É–º–∞ –¥–ª—è buy\n"
    "/settp <—Ä–∏–Ω–æ–∫> <pct> ‚Äî TP —É %\n"
    "/setsl <—Ä–∏–Ω–æ–∫> <pct> ‚Äî SL —É %\n"
    "/auto on|off ‚Äî —É–≤—ñ–º–∫/–≤–∏–º–∫ –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—é\n"
    "/status ‚Äî —Å—Ç–∞—Ç—É—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤\n"
    "/restart ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—É\n"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMIN_CHAT_ID
    chat_id = update.effective_chat.id
    if not ADMIN_CHAT_ID:
        ADMIN_CHAT_ID = str(chat_id)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞–ø–∏—à–∏ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")
    await update.message.reply_text(HELP)

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP)

async def price_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /price BTC_USDT")
        return
    m = normalize_market(context.args[0])
    p = price_fetch(m)
    await update.message.reply_text(f"{m}: {p}" if p else f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {m}")

async def balance_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ticker = context.args[0] if context.args else None
    if not TRADING_ENABLED:
        await update.message.reply_text("–ë–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: TRADING_ENABLED=false")
        return
    problem = validate_keys()
    if problem:
        await update.message.reply_text(f"‚ùå {problem}")
        return
    bals = wb_balance(ticker)
    if not bals:
        await update.message.reply_text("–ù–µ–º–∞—î –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –±–∞–ª–∞–Ω—Å—ñ–≤ –∞–±–æ –ø–æ–º–∏–ª–∫–∞ API.")
    else:
        lines = [f"{k}: {v}" for k, v in bals.items()]
        await update.message.reply_text("–ë–∞–ª–∞–Ω—Å:\n" + "\n".join(lines))

async def buy_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /buy BTC_USDT 5  (5 USDT)")
        return
    market = normalize_market(context.args[0])
    amount_q = float(context.args[1])
    if not TRADING_ENABLED:
        await update.message.reply_text(f"[SIM] –ü–æ–∫—É–ø–∫–∞ {market} –Ω–∞ {amount_q} (TRADING_DISABLED)")
        return
    prob = validate_keys()
    if prob:
        await update.message.reply_text(f"‚ùå {prob}")
        return
    try:
        res = wb_order_market(market, "buy", amount_q)
        await update.message.reply_text(f"‚úÖ BUY {market} {amount_q} (quote). –í—ñ–¥–ø–æ–≤—ñ–¥—å: {res}")
        # –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø—Ä–æ —É–≥–æ–¥—É
        if ADMIN_CHAT_ID:
            tg_send(int(ADMIN_CHAT_ID), f"üü¢ BUY {market} {amount_q} (quote)")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ BUY: {e}")

async def sell_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /sell BTC_USDT 0.001  (0.001 BTC)")
        return
    market = normalize_market(context.args[0])
    qty_base = float(context.args[1])
    if not TRADING_ENABLED:
        await update.message.reply_text(f"[SIM] –ü—Ä–æ–¥–∞–∂ {market} {qty_base} (TRADING_DISABLED)")
        return
    prob = validate_keys()
    if prob:
        await update.message.reply_text(f"‚ùå {prob}")
        return
    try:
        res = wb_order_market(market, "sell", qty_base)
        await update.message.reply_text(f"‚úÖ SELL {market} {qty_base} base. –í—ñ–¥–ø–æ–≤—ñ–¥—å: {res}")
        if ADMIN_CHAT_ID:
            tg_send(int(ADMIN_CHAT_ID), f"üî¥ SELL {market} {qty_base} base")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ SELL: {e}")

async def market_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /market BTC_USDT")
        return
    m = normalize_market(context.args[0])
    if not is_valid_market(m):
        await update.message.reply_text("‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä–∏–Ω–æ–∫. –î–æ–∑–≤–æ–ª–µ–Ω—ñ quote: USDT/USDC/BTC/ETH")
        return
    if m not in MARKETS:
        MARKETS.append(m)
    await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ {m}. –ü–æ—Ç–æ—á–Ω—ñ: {', '.join(MARKETS)}")

async def removemarket_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /removemarket BTC_USDT")
        return
    m = normalize_market(context.args[0])
    removed = False
    if m in MARKETS:
        MARKETS.remove(m); removed = True
    for mp in (TP_MAP, SL_MAP, DEFAULT_AMOUNT):
        mp.pop(m, None)
    await update.message.reply_text("üóë –í–∏–¥–∞–ª–µ–Ω–æ " + m if removed else f"‚ÑπÔ∏è {m} –Ω–µ —É —Å–ø–∏—Å–∫—É")

async def setamount_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /setamount BTC_USDT 10")
        return
    m = normalize_market(context.args[0])
    try:
        amt = float(context.args[1])
        DEFAULT_AMOUNT[m] = amt
        await update.message.reply_text(f"‚úÖ {m}: —Å—É–º–∞ quote = {amt}")
    except:
        await update.message.reply_text("‚ùå –í–∫–∞–∂–∏ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–∏")

async def settp_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /settp BTC_USDT 0.5")
        return
    m = normalize_market(context.args[0])
    try:
        TP_MAP[m] = float(context.args[1])
        await update.message.reply_text(f"‚úÖ {m}: TP = {TP_MAP[m]}%")
    except:
        await update.message.reply_text("‚ùå –í–∫–∞–∂–∏ —á–∏—Å–ª–æ –¥–ª—è TP")

async def setsl_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /setsl BTC_USDT 0.3")
        return
    m = normalize_market(context.args[0])
    try:
        SL_MAP[m] = float(context.args[1])
        await update.message.reply_text(f"‚úÖ {m}: SL = {SL_MAP[m]}%")
    except:
        await update.message.reply_text("‚ùå –í–∫–∞–∂–∏ —á–∏—Å–ª–æ –¥–ª—è SL")

async def auto_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global AUTO_TRADE
    if not context.args:
        await update.message.reply_text(f"–ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è: {'ON' if AUTO_TRADE else 'OFF'}")
        return
    v = context.args[0].lower()
    if v == "on":
        AUTO_TRADE = True; await update.message.reply_text("‚úÖ AUTO ON")
    elif v == "off":
        AUTO_TRADE = False; await update.message.reply_text("‚è∏ AUTO OFF")
    else:
        await update.message.reply_text("–í–∫–∞–∂–∏ on|off")

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    valid = [m for m in MARKETS if is_valid_market(m)]
    if not valid:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ä–∏–Ω–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    lines = ["üìã –°—Ç–∞—Ç—É—Å:"]
    for m in valid:
        lines.append(f"{m}: Amt={DEFAULT_AMOUNT.get(m,'-')} TP={TP_MAP.get(m,'-')} SL={SL_MAP.get(m,'-')}")
    await update.message.reply_text("\n".join(lines))

async def restart_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
    try:
        os.execv(sys.executable, [sys.executable] + sys.argv)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏: {e}")

# ========= Jobs =========

async def hourly_report_job(context: ContextTypes.DEFAULT_TYPE):
    chat_id = int(ADMIN_CHAT_ID) if ADMIN_CHAT_ID else None
    lines = ["‚è≥ –©–æ–≥–æ–¥–∏–Ω–Ω–∏–π –∑–≤—ñ—Ç:"]
    for m in [x for x in MARKETS if is_valid_market(x)]:
        p = price_fetch(m)
        lines.append(f"{m}: Price={p} Amt={DEFAULT_AMOUNT.get(m,'-')} TP={TP_MAP.get(m,'-')} SL={SL_MAP.get(m,'-')}")
    txt = "\n".join(lines)
    if chat_id:
        try:
            await context.bot.send_message(chat_id=chat_id, text=txt)
        except Exception as e:
            log.error(f"[hourly_report] {e}")
    else:
        log.info(txt)

def pct_change(new: float, old: float) -> float:
    if old == 0:
        return 0.0
    return (new - old) / old * 100.0

async def auto_trade_job(context: ContextTypes.DEFAULT_TYPE):
    if not AUTO_TRADE:
        return
    problem = validate_keys() if TRADING_ENABLED else None
    # –ù–µ –±–ª–æ–∫—É—î–º–æ —Ç–æ—Ä–≥–æ–≤–∏–π —Ü–∏–∫–ª –¥–ª—è –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –∫–ª—é—á—ñ–≤, –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª—é—î–º–æ
    for m in [x for x in MARKETS if is_valid_market(x)]:
        try:
            p = price_fetch(m)
            if p is None:
                continue
            prev = LAST_PRICES.get(m, p)
            LAST_PRICES[m] = p
            # –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–∏ –ø–∞–¥—ñ–Ω–Ω—ñ >= DEFAULT_BUY_TRIGGER_PCT
            if m not in OPEN_POS:
                drop = pct_change(p, prev)
                if drop <= -DEFAULT_BUY_TRIGGER_PCT:
                    amt_q = float(DEFAULT_AMOUNT.get(m, 0))
                    if amt_q > 0:
                        if TRADING_ENABLED and not problem:
                            res = wb_order_market(m, "buy", amt_q)
                            log.info(f"[BUY] {m} {amt_q} -> {res}")
                        else:
                            log.info(f"[SIM BUY] {m} {amt_q}")
                        qty = amt_q / p
                        OPEN_POS[m] = {"buy_price": p, "qty": qty}
                        # –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è
                        chat_id = int(ADMIN_CHAT_ID) if ADMIN_CHAT_ID else None
                        if chat_id:
                            await context.bot.send_message(chat_id, f"üü¢ BUY {m} @ {p:.6f} qty‚âà{qty:.6f}")
            else:
                # –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ TP / SL
                buy_p = OPEN_POS[m]["buy_price"]
                qty = OPEN_POS[m]["qty"]
                tp_pct = float(TP_MAP.get(m, 0) or 0)
                sl_pct = float(SL_MAP.get(m, 0) or 0)
                up = pct_change(p, buy_p)
                down = -up
                do_sell = False
                reason = ""
                if tp_pct > 0 and up >= tp_pct:
                    do_sell = True; reason = f"TP {tp_pct}%"
                if not do_sell and sl_pct > 0 and down >= sl_pct:
                    do_sell = True; reason = f"SL {sl_pct}%"
                if do_sell:
                    if TRADING_ENABLED and not problem:
                        res = wb_order_market(m, "sell", qty)
                        log.info(f"[SELL] {m} {qty} -> {res}")
                    else:
                        log.info(f"[SIM SELL] {m} {qty} ({reason})")
                    chat_id = int(ADMIN_CHAT_ID) if ADMIN_CHAT_ID else None
                    if chat_id:
                        await context.bot.send_message(chat_id, f"üî¥ SELL {m} @ {p:.6f} qty={qty:.6f} ({reason})")
                    OPEN_POS.pop(m, None)
        except Exception as e:
            # –Ω–µ –≤–∞–ª–∏–º–æ –≤–µ—Å—å —Ü–∏–∫–ª ‚Äî –ª–∏—à–µ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω—É –ø–∞—Ä—É
            log.error(f"[AUTO LOOP] {m}: {e}")
            chat_id = int(ADMIN_CHAT_ID) if ADMIN_CHAT_ID else None
            if chat_id:
                try:
                    await context.bot.send_message(chat_id, f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –Ω–∞ {m}: {e}. –ü–∞—Ä–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞, —ñ–Ω—à—ñ –ø—Ä–∞—Ü—é—é—Ç—å.")
                except Exception as ee:
                    log.error(f"[notify error] {ee}")

# ========= App bootstrap =========

def main():
    acquire_lock_or_exit()

    app = Application.builder().token(BOT_TOKEN).build()

    # Handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("price", price_cmd))
    app.add_handler(CommandHandler("balance", balance_cmd))
    app.add_handler(CommandHandler("buy", buy_cmd))
    app.add_handler(CommandHandler("sell", sell_cmd))
    app.add_handler(CommandHandler("market", market_cmd))
    app.add_handler(CommandHandler("removemarket", removemarket_cmd))
    app.add_handler(CommandHandler("setamount", setamount_cmd))
    app.add_handler(CommandHandler("settp", settp_cmd))
    app.add_handler(CommandHandler("setsl", setsl_cmd))
    app.add_handler(CommandHandler("auto", auto_cmd))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("restart", restart_cmd))

    # Jobs
    jq: JobQueue = app.job_queue
    jq.run_repeating(hourly_report_job, interval=3600, first=30, name="hourly_report")
    jq.run_repeating(auto_trade_job, interval=5, first=5, name="auto_trade")

    # –Ø–∫—â–æ –∫–ª—é—á—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ ‚Äî –ø–æ–ø–µ—Ä–µ–¥–∂–∞—î–º–æ, –∞–ª–µ –ø—Ä–∞—Ü—é—î–º–æ –≤ —Å–∏–º—É–ª—è—Ü—ñ—ó
    prob = validate_keys() if TRADING_ENABLED else None
    if prob and ADMIN_CHAT_ID:
        try:
            import asyncio
            asyncio.get_event_loop().create_task(app.bot.send_message(int(ADMIN_CHAT_ID), f"‚ö†Ô∏è {prob}. –¢–æ—Ä–≥—ñ–≤–ª—è —É SIM —Ä–µ–∂–∏–º—ñ."))
        except Exception:
            pass

    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
