import os
import sys
import asyncio
import logging
import requests
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É .env")
    sys.exit(1)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
                    level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
AUTO_TRADE = True
MARKETS = []
DEFAULT_AMOUNT = {}
TP_MAP = {}
SL_MAP = {}
TASKS = set()

VALID_QUOTE_ASSETS = {"USDT", "USDC", "BTC", "ETH"}

def is_valid_market(m: str) -> bool:
    if "_" not in m:
        return False
    base, quote = m.split("_", 1)
    return bool(base) and quote in VALID_QUOTE_ASSETS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ! –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –∞–∫—Ç–∏–≤–Ω–∞.")

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–∞–ª–∞–Ω—Å: (—Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ API WhiteBIT)")  # TODO: –¥–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É

async def setamount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /setamount BTC_USDT 10")
        return
    market, amount = context.args
    DEFAULT_AMOUNT[market] = float(amount)
    await update.message.reply_text(f"–î–ª—è {market} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å—É–º—É {amount}")

async def market(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /market BTC_USDT")
        return
    m = context.args[0]
    if is_valid_market(m):
        if m not in MARKETS:
            MARKETS.append(m)
            await update.message.reply_text(f"‚úÖ {m} –¥–æ–¥–∞–Ω–æ.")
        else:
            await update.message.reply_text(f"{m} –≤–∂–µ —î.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä–∏–Ω–æ–∫")

async def removemarket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /removemarket BTC_USDT")
        return
    m = context.args[0]
    if m in MARKETS:
        MARKETS.remove(m)
        await update.message.reply_text(f"üóë {m} –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await update.message.reply_text(f"{m} –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É.")

async def settp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /settp BTC_USDT 1")
        return
    m, tp = context.args
    TP_MAP[m] = float(tp)
    await update.message.reply_text(f"TP –¥–ª—è {m} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {tp}%")

async def setsl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ü—Ä–∏–∫–ª–∞–¥: /setsl BTC_USDT 1")
        return
    m, sl = context.args
    SL_MAP[m] = float(sl)
    await update.message.reply_text(f"SL –¥–ª—è {m} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {sl}%")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not MARKETS:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ä–∏–Ω–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    msg = "üìä –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
"
    for m in MARKETS:
        msg += f"{m} | –°—É–º–∞: {DEFAULT_AMOUNT.get(m,'?')} | TP: {TP_MAP.get(m,'?')} | SL: {SL_MAP.get(m,'?')}
"
    await update.message.reply_text(msg)

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚õî –ë–æ—Ç –∑—É–ø–∏–Ω—è—î—Ç—å—Å—è...")
    await context.application.stop()

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    os.execv(sys.executable, ['python'] + sys.argv)

async def auto_trade_loop(app: Application):
    while True:
        for m in [x for x in MARKETS if is_valid_market(x)]:
            logging.info(f"üîÑ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ {m}")
            # TODO: –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —Ç–æ—Ä–≥—ñ–≤–ª—ñ –∑ API
        await asyncio.sleep(60)

def main():
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("setamount", setamount))
    application.add_handler(CommandHandler("market", market))
    application.add_handler(CommandHandler("removemarket", removemarket))
    application.add_handler(CommandHandler("settp", settp))
    application.add_handler(CommandHandler("setsl", setsl))
    application.add_handler(CommandHandler("status", status))
    application.add_handler(CommandHandler("stop", stop))
    application.add_handler(CommandHandler("restart", restart))

    loop = asyncio.get_event_loop()
    loop.create_task(auto_trade_loop(application))
    application.run_polling()

if __name__ == "__main__":
    main()
